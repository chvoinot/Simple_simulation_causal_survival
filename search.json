[
  {
    "objectID": "Notebook_causal_survival.html",
    "href": "Notebook_causal_survival.html",
    "title": "\n        \n         Causal survival analysis",
    "section": "",
    "text": "Causal survival analysis is a growing field that integrates causal inference (D. B. Rubin 1974; Hernán and Robins 2010) with survival analysis (Kalbfleisch and Prentice 2002) to evaluate the impact of treatments on time-to-event outcomes, while accounting for censoring situations where only partial information about an event’s occurrence is available.\nBeing a relatively new domain, the existing literature, though vast, remains fragmented. As a result, a clear understanding of the theoretical properties of various estimators is challenging to obtain. Moreover, the implementation of proposed methods is limited, leaving researchers confronted with a range of available estimators and the need to make numerous methodological decisions. There is a pressing need for a comprehensive survey that organizes the available methods, outlines the underlying assumptions, and provides an evaluation of estimator performance — particularly in finite sample settings. Such a survey also has the potential to help identify remaining methodological challenges that need to be addressed. This need becomes increasingly urgent as causal survival analysis gains traction in both theoretical and applied domains. For instance, its applications to external control arm analyses are particularly relevant in the context of single-arm clinical trials, where traditional comparator arms are unavailable. Regulatory guidelines have begun to acknowledge and support such semi-experimental approaches, reflecting the broader evolution of trial design and therapeutic innovation in precision medicine, see for instance (European Medecines Agency 2024).\nBy synthesizing the theoretical foundations, assumptions, and performance of various estimators, a survey on existing causal survival analysis methods would provide researchers and practitioners with the necessary tools to make informed methodological choices. This is crucial for fostering robust and reliable applications of causal survival analysis in both academic research and practical settings, where precise and valid results are paramount.\nIn this paper, we focus our attention to the estimation of the Restricted Mean Survival Time (RMST), a popular causal measure in survival analysis which offers an intuitive interpretation of the average survival time over a specified period. In particular, we decided to not cover the estimation of Hazard Ratio (HR), which has been prominently used but often questioned due to its potential non-causal nature (Martinussen, Vansteelandt, and Andersen 2020). Additionally, unlike the Hazard Ratio, the RMST has the desirable property of being a collapsible measure, meaning that the population effect can be expressed as a weighted average of subgroup effects, with positive weights that sum to one (Huitfeldt, Stensrud, and Suzuki 2019).\n\n\n\nWe set the analysis in the potential outcome framework, where a patient, described by a vector of covariates X \\in \\mathbb{R}^p, either receives a treatment (A=1) or is in the control group (A=0). The patient will then survive up to a certain time T(0) \\in \\mathbb{R}^+ in the control group, or up to a time T(1)\\in \\mathbb{R}^+ in the treatment group. In practice, we cannot simultaneously have access to T(0) and T(1), as one patient is either treated or control, but only to T defined as follows:\n\nAssumption. (Stable Unit Treatment Value Assumption: SUTVA) \nT = AT(1) + (1-A)T(0).\n\\tag{1}\n\nDue to potential censoring, the outcome T is not completely observed. The most common form of censoring is right-censoring (also known as type II censoring), which occurs when the event of interest has not taken place by the end of the observation period, indicating that it may have occurred later if the observation had continued (Turkson, Ayiah-Mensah, and Nimoh 2021). We focus in this study on this type of censoring only and we assume that we observe \\tilde T= T \\wedge C = \\min(T,C) for some censoring time C \\in \\mathbb{R}^+. When an observation is censored, the observed time is equal to the censoring time.\nWe also assume that we know whether an outcome is censored or not. In other words, we observe the censoring status variable \\Delta = \\mathbb{I}\\{T \\leqslant C\\}, where \\mathbb{I}\\{\\cdot\\} is the indicator function. \\Delta is 1 if the true outcome is observed, and 0 if it is censored.\nWe assume observing a n-sample of variables (X,A,\\widetilde T,\\Delta) stemming from an n-sample of the partially unobservable variables (X,A,T(0),T(1),C). A toy exemple of such data is given in Table 1.\n\n\n\nTable 1: Example of a survival dataset. In practice, only X,A,\\widetilde T and \\Delta are observed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nCovariates\n\n\nTreatment\nCensoring\nStatus\nPotential outcomes\n\nTrue outcome\nObserved outcome\n\n\n\n\ni\nX_{1}\nX_{2}\nX_{3}\nA\nC\n\\Delta\nT(0)\nT(1)\nT\n\\tilde{T}\n\n\n1\n1\n1.5\n4\n1\n?\n1\n?\n200\n200\n200\n\n\n2\n5\n1\n2\n0\n?\n1\n100\n?\n100\n100\n\n\n3\n9\n0.5\n3\n1\n200\n0\n?\n?\n?\n200\n\n\n\n\n\n\nOur aim is to estimate the Average Treatment Effect (ATE) defined as the difference between the Restricted Mean Survival Time of the treated and controls (Royston and Parmar 2013).\n\nDefinition 1 (Causal effect: Difference between Restricted Mean Survival Time)\n\n\\theta_{\\mathrm{RMST}} = \\mathbb{E}\\left[T(1) \\wedge \\tau - T(0) \\wedge \\tau\\right],\n where a \\wedge b := \\min(a,b) for a,b \\in \\mathbb{R}.\n\nWe define the survival functions S^{(a)}(t):=\\mathbb{P}(T(a) &gt; t) for a \\in \\{0,1\\}, i.e., the probability that a treated or non-treated individual will survive beyond a given time t. Likewise, we let S(t) := \\mathbb{P}(T &gt;t), and S_C(t) := \\mathbb{P}(C &gt; t). We also let G(t) := \\mathbb{P}(C \\geqslant t) be the left-limit of the survival function S_C. Because T(a) \\wedge \\tau are non-negative random variables, one can easily express the restricted mean survival time using the survival functions:\n\n\\mathbb{E}(T(a) \\wedge \\tau) = \\int_{0}^{\\infty} \\mathbb{P}(T(a)\\wedge \\tau &gt; t)dt = \\int_{0}^{\\tau}S^{(a)}(t)dt.\n\\tag{2}\nConsequently, \\theta_{\\mathrm{RMST}} can be interpreted as the mean difference between the survival function of treated and control until a fixed time horizon \\tau. A difference in RMST \\theta_{\\mathrm{RMST}} = 10 days with \\tau=200 means that, on average, the treatment increases the survival time by 10 days at 200 days. We give a visual interpretation of RMST in Figure 1.\n\n\n\n\n\n\nFigure 1: Plot of the estimated survival curves on synthetic toy-data. The \\theta_{\\mathrm{RMST}} at \\tau=50 corresponds to the yellow shaded area between the two survival curves. The curves have been estimated using Kaplan-Meier estimator, see Section 2.1.\n\n\n\nAlthough the present work focuses on the estimation of the difference in RMST, we would like to stress that the causal effect can be assessed through other measures, such as for instance the difference of the survival functions \n\\theta_{\\mathrm{SP}} := S^{(1)}(\\tau) - S^{(0)}(\\tau)\n for some time \\tau, see for instance (Ozenne et al. 2020). As mentionned in Section 1.1, another widely used measure (though not necessarily causal) is the hazards ratio, defined as \n\\theta_{\\mathrm{HR}} := \\frac{\\lambda^{(1)}(\\tau)}{\\lambda^{(0)}(\\tau)},\n where the hazard function \\lambda^{(a)} is defined as \n\\lambda^{(a)}(t) := \\lim_{h \\to 0^+}\\frac{\\mathbb{P}(T(a) \\in [t,t+j)|T(a) \\geqslant t)}{h}.\n in a continuous setting, or as \\lambda^{(a)}(t) := \\mathbb{P}(T(a) = t|T(a) \\geqslant t) when the survival times are discrete. The hazard functions and the survival functions are linked through the identities \nS^{(a)}(t) = \\exp\\left(-\\Lambda^{(a)}(t)\\right) \\quad \\text{where} \\quad \\Lambda^{(a)}(t) := \\int_0^t \\lambda^{(a)}(s)\\mathop{}\\!\\mathrm{d}s,\n\\tag{3} in the continuous case. The functions \\Lambda^{(a)} are call the cumulative hazard functions. In the discrete case, we have in turn \nS^{(a)}(t) = \\prod_{t_k \\leqslant t} \\left(1-\\lambda^{(a)}(t_k)\\right),\n\\tag{4} where \\{t_1,\\dots,t_K\\} are the atoms of T^{(a)}. These hazard functions are classically used to model the survival times and the censoring times, see Section 2.2.1.\n\n\n\nIn this paper, we detail the minimal theoretical framework that allows the analysis of established RMST estimators in the context of both Randomized Controlled Trials (Section 2) and observational data (Section 3). We give their statistical properties (consistency, asymptotic normality) along with proofs when possible. We then conduct in Section 5 a numerical study of these estimators through simulations under various experimental conditions, including independent and conditionally independent censoring and correct and incorrect model specifications. We conclude in Section 6 with practical recommendations on estimator selection, based on criteria such as asymptotic behavior, computational complexity, and efficiency.\n\n\n\nWe provide in Table 2 a summary of the notation used throughout the paper.\n\n\n\nTable 2: Summary of the notations.\n\n\n\n\n\n\n\n\n\nSymbol\nDescription\n\n\n\n\nX\nCovariates\n\n\nA\nTreatment indicator (A=1 for treatment, A=0 for control)\n\n\nT\nSurvival time\n\n\nT(a), a \\in \\{0,1\\}\nPotential survival time respectively with and without treatment\n\n\nS^{(a)},a \\in \\{0,1\\}\nSurvival function S^{(a)}(t) =\\mathbb{P}(T(a) &gt; t) of the potential survival times\n\n\n\\lambda^{(a)},a \\in \\{0,1\\}\nHazard function \\lambda^{(a)}(t) =\\lim_{h \\to 0^+}\\mathbb{P}(T(a) \\in [t,t+h) |T(a)\\geqslant t)/h of the potential survival times\n\n\n\\Lambda^{(a)},a \\in \\{0,1\\}\nCumulative hazard function of the potential survival times\n\n\nC\nCensoring time\n\n\nS_C\nSurvival function S_C(t) =\\mathbb{P}(C &gt; t) of the censoring time\n\n\nG\nLeft-limit of the survival function G(t) =\\mathbb{P}(C \\geqslant t) of the censoring time\n\n\n\\widetilde{T}\nObserved time (T \\wedge C)\n\n\n\\Delta\nCensoring status \\mathbb{I}\\{T \\leqslant C \\}\n\n\n\\Delta^{\\tau}\nCensoring status of the restricted time \\Delta^{\\tau} = \\max\\{\\Delta, \\mathbb{I}\\{\\widetilde{T} \\geqslant\\tau\\}\\}\n\n\n\\{t_{1},t_{2},\\dots,t_{K}\\}\nDiscrete times\n\n\ne(x)\nPropensity score \\mathbb{E} [A| X = x]\n\n\n\\mu(x,a), a \\in \\{0,1\\}\n\\mathbb{E}[T \\wedge \\tau \\mid X=x,A=a ]\n\n\nS(t|x,a), a \\in \\{0,1\\}\nConditional survival function, \\mathbb{P}(T &gt; t | X=x, A =a).\n\n\n\\lambda^{(a)}(t|x), a \\in \\{0,1\\}\nConditional hazard functions of the potential survival times\n\n\nG(t|x,a), a \\in \\{0,1\\}\nleft-limit of the conditional survival function of the censoring \\mathbb{P}(C\\geqslant t|X=x,A=a)\n\n\nQ_{S}(t|x,a), a \\in \\{0,1\\}\n\\mathbb{E}[T \\wedge \\tau \\mid X=x,A=a, T \\wedge \\tau&gt;t]"
  },
  {
    "objectID": "Notebook_causal_survival.html#sec-context",
    "href": "Notebook_causal_survival.html#sec-context",
    "title": "\n        \n         Causal survival analysis",
    "section": "",
    "text": "Causal survival analysis is a growing field that integrates causal inference (D. B. Rubin 1974; Hernán and Robins 2010) with survival analysis (Kalbfleisch and Prentice 2002) to evaluate the impact of treatments on time-to-event outcomes, while accounting for censoring situations where only partial information about an event’s occurrence is available.\nBeing a relatively new domain, the existing literature, though vast, remains fragmented. As a result, a clear understanding of the theoretical properties of various estimators is challenging to obtain. Moreover, the implementation of proposed methods is limited, leaving researchers confronted with a range of available estimators and the need to make numerous methodological decisions. There is a pressing need for a comprehensive survey that organizes the available methods, outlines the underlying assumptions, and provides an evaluation of estimator performance — particularly in finite sample settings. Such a survey also has the potential to help identify remaining methodological challenges that need to be addressed. This need becomes increasingly urgent as causal survival analysis gains traction in both theoretical and applied domains. For instance, its applications to external control arm analyses are particularly relevant in the context of single-arm clinical trials, where traditional comparator arms are unavailable. Regulatory guidelines have begun to acknowledge and support such semi-experimental approaches, reflecting the broader evolution of trial design and therapeutic innovation in precision medicine, see for instance (European Medecines Agency 2024).\nBy synthesizing the theoretical foundations, assumptions, and performance of various estimators, a survey on existing causal survival analysis methods would provide researchers and practitioners with the necessary tools to make informed methodological choices. This is crucial for fostering robust and reliable applications of causal survival analysis in both academic research and practical settings, where precise and valid results are paramount.\nIn this paper, we focus our attention to the estimation of the Restricted Mean Survival Time (RMST), a popular causal measure in survival analysis which offers an intuitive interpretation of the average survival time over a specified period. In particular, we decided to not cover the estimation of Hazard Ratio (HR), which has been prominently used but often questioned due to its potential non-causal nature (Martinussen, Vansteelandt, and Andersen 2020). Additionally, unlike the Hazard Ratio, the RMST has the desirable property of being a collapsible measure, meaning that the population effect can be expressed as a weighted average of subgroup effects, with positive weights that sum to one (Huitfeldt, Stensrud, and Suzuki 2019)."
  },
  {
    "objectID": "Notebook_causal_survival.html#sec-notations",
    "href": "Notebook_causal_survival.html#sec-notations",
    "title": "\n        \n         Causal survival analysis",
    "section": "",
    "text": "We set the analysis in the potential outcome framework, where a patient, described by a vector of covariates X \\in \\mathbb{R}^p, either receives a treatment (A=1) or is in the control group (A=0). The patient will then survive up to a certain time T(0) \\in \\mathbb{R}^+ in the control group, or up to a time T(1)\\in \\mathbb{R}^+ in the treatment group. In practice, we cannot simultaneously have access to T(0) and T(1), as one patient is either treated or control, but only to T defined as follows:\n\nAssumption. (Stable Unit Treatment Value Assumption: SUTVA) \nT = AT(1) + (1-A)T(0).\n\\tag{1}\n\nDue to potential censoring, the outcome T is not completely observed. The most common form of censoring is right-censoring (also known as type II censoring), which occurs when the event of interest has not taken place by the end of the observation period, indicating that it may have occurred later if the observation had continued (Turkson, Ayiah-Mensah, and Nimoh 2021). We focus in this study on this type of censoring only and we assume that we observe \\tilde T= T \\wedge C = \\min(T,C) for some censoring time C \\in \\mathbb{R}^+. When an observation is censored, the observed time is equal to the censoring time.\nWe also assume that we know whether an outcome is censored or not. In other words, we observe the censoring status variable \\Delta = \\mathbb{I}\\{T \\leqslant C\\}, where \\mathbb{I}\\{\\cdot\\} is the indicator function. \\Delta is 1 if the true outcome is observed, and 0 if it is censored.\nWe assume observing a n-sample of variables (X,A,\\widetilde T,\\Delta) stemming from an n-sample of the partially unobservable variables (X,A,T(0),T(1),C). A toy exemple of such data is given in Table 1.\n\n\n\nTable 1: Example of a survival dataset. In practice, only X,A,\\widetilde T and \\Delta are observed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nCovariates\n\n\nTreatment\nCensoring\nStatus\nPotential outcomes\n\nTrue outcome\nObserved outcome\n\n\n\n\ni\nX_{1}\nX_{2}\nX_{3}\nA\nC\n\\Delta\nT(0)\nT(1)\nT\n\\tilde{T}\n\n\n1\n1\n1.5\n4\n1\n?\n1\n?\n200\n200\n200\n\n\n2\n5\n1\n2\n0\n?\n1\n100\n?\n100\n100\n\n\n3\n9\n0.5\n3\n1\n200\n0\n?\n?\n?\n200\n\n\n\n\n\n\nOur aim is to estimate the Average Treatment Effect (ATE) defined as the difference between the Restricted Mean Survival Time of the treated and controls (Royston and Parmar 2013).\n\nDefinition 1 (Causal effect: Difference between Restricted Mean Survival Time)\n\n\\theta_{\\mathrm{RMST}} = \\mathbb{E}\\left[T(1) \\wedge \\tau - T(0) \\wedge \\tau\\right],\n where a \\wedge b := \\min(a,b) for a,b \\in \\mathbb{R}.\n\nWe define the survival functions S^{(a)}(t):=\\mathbb{P}(T(a) &gt; t) for a \\in \\{0,1\\}, i.e., the probability that a treated or non-treated individual will survive beyond a given time t. Likewise, we let S(t) := \\mathbb{P}(T &gt;t), and S_C(t) := \\mathbb{P}(C &gt; t). We also let G(t) := \\mathbb{P}(C \\geqslant t) be the left-limit of the survival function S_C. Because T(a) \\wedge \\tau are non-negative random variables, one can easily express the restricted mean survival time using the survival functions:\n\n\\mathbb{E}(T(a) \\wedge \\tau) = \\int_{0}^{\\infty} \\mathbb{P}(T(a)\\wedge \\tau &gt; t)dt = \\int_{0}^{\\tau}S^{(a)}(t)dt.\n\\tag{2}\nConsequently, \\theta_{\\mathrm{RMST}} can be interpreted as the mean difference between the survival function of treated and control until a fixed time horizon \\tau. A difference in RMST \\theta_{\\mathrm{RMST}} = 10 days with \\tau=200 means that, on average, the treatment increases the survival time by 10 days at 200 days. We give a visual interpretation of RMST in Figure 1.\n\n\n\n\n\n\nFigure 1: Plot of the estimated survival curves on synthetic toy-data. The \\theta_{\\mathrm{RMST}} at \\tau=50 corresponds to the yellow shaded area between the two survival curves. The curves have been estimated using Kaplan-Meier estimator, see Section 2.1.\n\n\n\nAlthough the present work focuses on the estimation of the difference in RMST, we would like to stress that the causal effect can be assessed through other measures, such as for instance the difference of the survival functions \n\\theta_{\\mathrm{SP}} := S^{(1)}(\\tau) - S^{(0)}(\\tau)\n for some time \\tau, see for instance (Ozenne et al. 2020). As mentionned in Section 1.1, another widely used measure (though not necessarily causal) is the hazards ratio, defined as \n\\theta_{\\mathrm{HR}} := \\frac{\\lambda^{(1)}(\\tau)}{\\lambda^{(0)}(\\tau)},\n where the hazard function \\lambda^{(a)} is defined as \n\\lambda^{(a)}(t) := \\lim_{h \\to 0^+}\\frac{\\mathbb{P}(T(a) \\in [t,t+j)|T(a) \\geqslant t)}{h}.\n in a continuous setting, or as \\lambda^{(a)}(t) := \\mathbb{P}(T(a) = t|T(a) \\geqslant t) when the survival times are discrete. The hazard functions and the survival functions are linked through the identities \nS^{(a)}(t) = \\exp\\left(-\\Lambda^{(a)}(t)\\right) \\quad \\text{where} \\quad \\Lambda^{(a)}(t) := \\int_0^t \\lambda^{(a)}(s)\\mathop{}\\!\\mathrm{d}s,\n\\tag{3} in the continuous case. The functions \\Lambda^{(a)} are call the cumulative hazard functions. In the discrete case, we have in turn \nS^{(a)}(t) = \\prod_{t_k \\leqslant t} \\left(1-\\lambda^{(a)}(t_k)\\right),\n\\tag{4} where \\{t_1,\\dots,t_K\\} are the atoms of T^{(a)}. These hazard functions are classically used to model the survival times and the censoring times, see Section 2.2.1."
  },
  {
    "objectID": "Notebook_causal_survival.html#organisation-of-the-paper",
    "href": "Notebook_causal_survival.html#organisation-of-the-paper",
    "title": "\n        \n         Causal survival analysis",
    "section": "",
    "text": "In this paper, we detail the minimal theoretical framework that allows the analysis of established RMST estimators in the context of both Randomized Controlled Trials (Section 2) and observational data (Section 3). We give their statistical properties (consistency, asymptotic normality) along with proofs when possible. We then conduct in Section 5 a numerical study of these estimators through simulations under various experimental conditions, including independent and conditionally independent censoring and correct and incorrect model specifications. We conclude in Section 6 with practical recommendations on estimator selection, based on criteria such as asymptotic behavior, computational complexity, and efficiency."
  },
  {
    "objectID": "Notebook_causal_survival.html#notations",
    "href": "Notebook_causal_survival.html#notations",
    "title": "\n        \n         Causal survival analysis",
    "section": "",
    "text": "We provide in Table 2 a summary of the notation used throughout the paper.\n\n\n\nTable 2: Summary of the notations.\n\n\n\n\n\n\n\n\n\nSymbol\nDescription\n\n\n\n\nX\nCovariates\n\n\nA\nTreatment indicator (A=1 for treatment, A=0 for control)\n\n\nT\nSurvival time\n\n\nT(a), a \\in \\{0,1\\}\nPotential survival time respectively with and without treatment\n\n\nS^{(a)},a \\in \\{0,1\\}\nSurvival function S^{(a)}(t) =\\mathbb{P}(T(a) &gt; t) of the potential survival times\n\n\n\\lambda^{(a)},a \\in \\{0,1\\}\nHazard function \\lambda^{(a)}(t) =\\lim_{h \\to 0^+}\\mathbb{P}(T(a) \\in [t,t+h) |T(a)\\geqslant t)/h of the potential survival times\n\n\n\\Lambda^{(a)},a \\in \\{0,1\\}\nCumulative hazard function of the potential survival times\n\n\nC\nCensoring time\n\n\nS_C\nSurvival function S_C(t) =\\mathbb{P}(C &gt; t) of the censoring time\n\n\nG\nLeft-limit of the survival function G(t) =\\mathbb{P}(C \\geqslant t) of the censoring time\n\n\n\\widetilde{T}\nObserved time (T \\wedge C)\n\n\n\\Delta\nCensoring status \\mathbb{I}\\{T \\leqslant C \\}\n\n\n\\Delta^{\\tau}\nCensoring status of the restricted time \\Delta^{\\tau} = \\max\\{\\Delta, \\mathbb{I}\\{\\widetilde{T} \\geqslant\\tau\\}\\}\n\n\n\\{t_{1},t_{2},\\dots,t_{K}\\}\nDiscrete times\n\n\ne(x)\nPropensity score \\mathbb{E} [A| X = x]\n\n\n\\mu(x,a), a \\in \\{0,1\\}\n\\mathbb{E}[T \\wedge \\tau \\mid X=x,A=a ]\n\n\nS(t|x,a), a \\in \\{0,1\\}\nConditional survival function, \\mathbb{P}(T &gt; t | X=x, A =a).\n\n\n\\lambda^{(a)}(t|x), a \\in \\{0,1\\}\nConditional hazard functions of the potential survival times\n\n\nG(t|x,a), a \\in \\{0,1\\}\nleft-limit of the conditional survival function of the censoring \\mathbb{P}(C\\geqslant t|X=x,A=a)\n\n\nQ_{S}(t|x,a), a \\in \\{0,1\\}\n\\mathbb{E}[T \\wedge \\tau \\mid X=x,A=a, T \\wedge \\tau&gt;t]"
  },
  {
    "objectID": "Notebook_causal_survival.html#sec-theoryRCT_indc",
    "href": "Notebook_causal_survival.html#sec-theoryRCT_indc",
    "title": "\n        \n         Causal survival analysis",
    "section": "2.1 Independent censoring: the Kaplan-Meier estimator",
    "text": "2.1 Independent censoring: the Kaplan-Meier estimator\nIn a first approach, one might assume that the censoring times are independent from the rest of the variables.\n\nAssumption. (Independent censoring) \nC \\perp\\mkern-9.5mu\\perp T(0),T(1),X,A.\n\\tag{8}\n\nUnder Equation 8, subjects censored at time t are representative of all subjects who remain at risk at time t. Figure 2 represents the causal graph when the study is randomized and outcomes are observed under independent censoring.\n\n\n\n\n\n\nFigure 2: Causal graph in RCT survival data with independent censoring.\n\n\n\nWe also assume that there is no almost-sure upper bound on the censoring time before \\tau, which we rephrase under the following assumption.\n\nAssumption. (Positivity of the censoring process) There exists \\varepsilon&gt; 0 such that \nG(t) \\geqslant\\varepsilon\\quad \\text{for all} \\quad t \\in [0,\\tau).\n\\tag{9}\n\nIf indeed it was the case that \\mathbb{P}(C &lt; t) = 1 for some t &lt; \\tau, then we would not be able to infer anything on the survival function on the interval [t,\\tau] as all observation times \\widetilde T_i would be in [0,t] almost surely. In practice, adjusting the threshold time \\tau can help satisfy the positivity assumption. For instance, in a clinical study, if a subgroup of patients has zero probability of remaining uncensored at a given time, \\tau can be modified to ensure that participants have a feasible chance of remaining uncensored up to the revised threshold.\nThe two Assumptions 8 and 9 together allow the distributions of T(a) to be identifiable, in the sense that there exists an identity that expresses S^{(a)} as a function of the joint distribution of (\\widetilde T,\\Delta,A=a), see for instance Ebrahimi, Molefe, and Ying (2003) for such a formula in a non-causal framework. This enables several estimation strategies, the most well-known being the Kaplan-Meier product-limit estimator.\nTo motivate the definition of the latter and explicit the identifiability identity, we set the analysis in the discrete case. We let \\{t_k\\}_{k \\geqslant 1} be a set of positive and increasing times and assume that T \\in \\{t_k\\}_{k \\geqslant 1} almost surely. Then for any t \\in [0,\\tau], it holds, letting t_0 = 0 by convention, thanks to Equation 4,\n\\begin{align*}\nS(t| A=a) &= \\mathbb{P}(T &gt; t|A=a) = \\prod_{t_k \\leqslant t} \\left(1 - \\mathbb{P}(T = t_k | T &gt; t_{k-1}, A=a)\\right) \\\\\n&= \\prod_{t_k \\leqslant t} \\left(1 - \\frac{\\mathbb{P}(T = t_{k}, A=a)}{\\mathbb{P}(T \\geqslant t_{k},A=a)}\\right).\n\\end{align*}\nUsing Assumptions 8 and 9, we find that \n\\frac{\\mathbb{P}(T = t_{k}, A=a)}{\\mathbb{P}(T \\geqslant t_{k},A=a)} = \\frac{\\mathbb{P}(T = t_{k},C \\geqslant t_k,A=a)}{\\mathbb{P}(T \\geqslant t_{k}, C\\geqslant t_k,A=a)} =  \\frac{\\mathbb{P}(\\widetilde T = t_{k}, \\Delta = 1,A=a)}{\\mathbb{P}( \\widetilde T \\geqslant t_{k},A=a)},\n\\tag{10} yielding the final identity \nS(t|A=a) = \\prod_{t_k \\leqslant t} \\left(1-\\frac{\\mathbb{P}(\\widetilde T = t_{k}, \\Delta = 1,A=a)}{\\mathbb{P}( \\widetilde T \\geqslant t_{k},A=a)}\\right).\n\\tag{11} Notice that the right hand side only depends on the distribution of the observed tuple (A,\\widetilde T,\\Delta). This last equation suggests in turn to introduce the quantities \nD_k(a) := \\sum_{i=1}^n \\mathbb{I}(\\widetilde T_i = t_k, \\Delta_i = 1, A=a) \\quad\\text{and}\\quad N_k(a) := \\sum_{i=1}^n \\mathbb{I}(\\widetilde T_i \\geqslant t_k, A=a),\n\\tag{12} which correspond respectively to the number of deaths D_k(a) and of individuals at risk N_k(a) at time t_k in the treated group (a=1) or in the control group (a=0).\n\nDefinition 2 (Kaplan-Meier estimator, Kaplan and Meier (1958)) With D_k(a) and N_k(a) defined in Equation 12, we let\n\n    \\widehat{S}_{\\mathrm{KM}}(t|A=a) := \\prod_{t_k \\leqslant t}\\left(1-\\frac{D_k(a)}{N_k(a)}\\right).\n\\tag{13}\n\nThe assiociated RMST estimator is then simply defined as \n\\widehat{\\theta}_{\\mathrm{KM}} = \\int_{0}^{\\tau}\\widehat{S}_{KM}(t|A=1)-\\widehat{S}_{KM}(t|A=0)dt.\n\\tag{14} The Kaplan-Meier estimator is the Maximum Likelihood Estimator (MLE) of the survival functions, see for instance Kaplan and Meier (1958). Furthermore, because D_k(a) and N_k(a) are sums of i.i.d. random variables, the Kaplan-Meier estimator inherits some convenient statistical properties.\n\nProposition 1 Under Assumptions 1, 5, 6, 8 and 9, and for all t \\in [0,\\tau], the estimator \\widehat S_{\\mathrm{KM}}(t|A=a) of S^{(a)}(t) is strongly consistent and admits the following bounds for its bias: \n0 \\leqslant S^{(a)}(t) - \\mathbb{E}[\\widehat S_\\mathrm{KM}(t|A=a)] \\leqslant O(\\mathbb{P}(N_k(a) = 0)),\n where k is the greatest time t_k such that t \\geqslant t_k.\n\nGill (1983) gives a more precise lower-bound on the bias in the case of continuous distributions, which was subsequently refined by Zhou (1988). The bound we give, although slightly looser, still exhibits the same asymptotic regime. In particular, as soon as S^{(a)}(t) &gt; 0 (and Assumption 9 holds), then the bias decays exponentially fast towards 0. We give in Section 8.1 a simple proof of our bound is our context.\n\nProposition 2 Under Assumptions 1, 5, 6, 8 and 9, and for all t \\in [0,\\tau], \\widehat S_{\\mathrm{KM}}(t|A=a) is asymptotically normal and \\sqrt{n}\\left(\\widehat S_{\\mathrm{KM}}(t|A=a) - S^{(a)}(t)\\right) converges in distribution towards a centered Gaussian of variance \nV_{\\mathrm{KM}}(t|A=a) := S^{(a)}(t)^2 \\sum_{t_k \\leqslant t} \\frac{1-s_k(a)}{s_k(a) r_k(a)},\n where s_k(a) = S^{(a)}(t_k)/S^{(a)}(t_{k-1}) and r_k(a) = \\mathbb{P}(\\widetilde T \\geqslant t_k, A=a).\n\nThe proof of Proposition 2 can be found in Section 8.1. Because D_k(a)/N_k(a) is a natural estimator of 1-s_k(a) and, \\frac{1}{n} N_k(a) a natural estimator for r_k(a), the asymptotic variance of the Kaplan-Meier estimator can be estimated with the so-called Greenwood formula, as already derived heuristically in Kaplan and Meier (1958):\n\n\\widehat{\\mathrm{Var}} \\left(\\widehat{S}_{\\mathrm{KM}}(t|A=a)\\right) := \\widehat{S}_{\\mathrm{KM}}(t|A=a)^2 \\sum_{t_k \\leqslant t} \\frac{D_k(a)}{N_k(a)(N_k(a)-D_k(a))}.\n\\tag{15}\nWe finally mention that the KM estimator as defined in Definition 2 still makes sense in a non-discrete setting, and one only needs to replace the fixed grid \\{t_k\\} by the values at which we observed an event (\\widetilde T_i = t_k, \\Delta_i =1). We refer to Breslow and Crowley (1974) for a study of this estimator in the continuous case and to Aalen, Borgan, and Gjessing (2008), Sec 3.2 for a general study of the KM estimator through the prism of point processes."
  },
  {
    "objectID": "Notebook_causal_survival.html#sec-condcens",
    "href": "Notebook_causal_survival.html#sec-condcens",
    "title": "\n        \n         Causal survival analysis",
    "section": "2.2 Conditionally independent censoring",
    "text": "2.2 Conditionally independent censoring\nAn alternative hypothesis in survival analysis that relaxes the assumption of independent censoring is conditionally independent censoring, also refered sometimes as informative censoring. It allows to model more realistic censoring processes, in particular in situations where there are reasons to believe that C may be dependent from A and X (for instance, if patient is more like to leave the study when treated because of side-effects of the treatment).\n\nAssumption. (Conditionally independent censoring) \nC \\perp\\mkern-9.5mu\\perp T(0),T(1) ~ | ~X,A\n\\tag{16}\n\nUnder Equation 16, subjects within a same stratum defined by X=x and A=a have equal probability of censoring at time t, for all t. In case of conditionally independent censoring, we also need to assume that all subjects have a positive probability to remain uncensored at their time-to-event.\n\nAssumption. (Positivity / Overlap for censoring) There exists \\varepsilon&gt; 0 such that for all t\\in [0,\\tau), it almost surely holds \nG(t|A,X) \\geqslant\\varepsilon.\n\\tag{17}\n\nFigure 3 represents the causal graph when the study is randomized with conditionally independent censoring.\n\n\n\n\n\n\nFigure 3: Causal graph in RCT survival data with dependent censoring.\n\n\n\nUnder dependent censoring, the Kaplan-Meier estimator as defined in Definition 2 can fail to estimate survival, in particular because Equation 10 does not hold anymore. Alternatives include plug-in G-formula estimators (Section 2.2.1) and unbiased transformations (Section 2.2.2).\n\n2.2.1 The G-formula and the Cox Model\nBecause the censoring is now independent from the potential outcome conditionally to the covariates, it would seem natural to model the response of the survival time conditionally to these covariates too: \n\\mu(x,a) := \\mathbb{E}[T \\wedge \\tau |X = x, A = a].\n\nBuilding on Equation 7, one can express the RMST as a function of \\mu: \\begin{align*}\n\\theta_{\\mathrm{RMST}} = \\mathbb{E}\\left[\\mathbb{E}[T \\wedge \\tau |X, A = 1]\\right] - \\mathbb{E}\\left[ T \\wedge \\tau|X, A= 0]\\right] = \\mathbb{E}[\\mu(X,1)-\\mu(X,0)].\n\\end{align*}\nAn estimator \\widehat\\mu of \\mu would then straightforwardly yield an estimator of the difference in RMST through the so-called G-formula plug-in estimator:\n \\widehat{\\theta}_{\\mathrm{G-formula}} = \\frac{1}{n} \\sum_{i=1}^n \\widehat\\mu\\left(X_i, 1\\right)-\\widehat\\mu\\left(X_i, 0\\right).  \\tag{18}\nWe would like to stress that a G-formula approach works also in a observational context as the one introduced in Section 3.2. However, because the estimation strategies presented in the next sections relies on estimating nuisance parameters, and that this latter task is often done in the same way as we estimate the conditional response \\mu, we decided to not delay the introduction of the G-formula any further, and we present below a few estimation methods for \\mu. These methods are sub-divised in two categories: T-learners, where \\mu(\\cdot,1) is estimated separately from \\mu(\\cdot,0), and _S-learners, where \\widehat\\mu is obtained by fitting a single model based on covariates (X,A).\nCox’s Model. There are many ways to model \\mu in a survival context, the most notorious of which being the Cox proportional hazards model (Cox 1972). It relies on a semi-parametric modelling the conditional hazard functions \\lambda^{(a)}(t|X) as \n\\lambda^{(a)}(t|X) = \\lambda_0^{(a)}(t) \\exp(X^\\top\\beta^{(a)}),\n where \\lambda^{(a)}_0 is a baseline hazard function and \\beta^{(a)} has the same dimension as the vector of covariate X. The conditional survival function then take the simple form (in the continuous case) \nS^{(a)}(t|X) = S^{(a)}_0(t)^{\\exp(X^\\top\\beta^{(a)})},\n where S^{(a)}_0(t) is the survival function associated with \\lambda_0^{(a)}. The vector \\beta^{(a)} is classically estimated by maximizing the so-called partial likelihood function as introduced in the original paper of Cox (1972): \n\\mathcal{L}(\\beta) := \\prod_{\\Delta_i = 1} \\frac{\\exp(X_i^\\top \\beta)}{\\displaystyle\\sum_{\\widetilde T_j \\geqslant\\widetilde T_i} \\exp(X_j^\\top \\beta)},\n\nwhile the cumulative baseline hazard function can be estimated through the Breslow’s estimator (Breslow 1974): \n\\widehat\\Lambda_0^{(a)}(t) = \\sum_{\\Delta_i = 1, \\widetilde T_i \\leqslant t} \\frac{1}{\\displaystyle\\sum_{\\widetilde T_j \\geqslant\\widetilde T_i} \\exp(X_j^\\top \\widehat\\beta^{(a)})}\n where \\widehat\\beta^{(a)} is a partial likelihood maximizer. One can show that (\\widehat\\beta^{(a)},\\widehat\\Lambda_0^{(a)}) is the MLE of the true likelihood, when \\widehat\\Lambda_0^{(a)} is optimized over all step fonctions of the form \n\\Lambda_0(t) := \\sum_{\\Delta_i=1} h_i, \\quad h_i \\in \\mathbb{R}^+.\n This fact was already hinted in the original paper by Cox and made rigorous in many subsequent papers, see for instance Fan, Feng, and Wu (2010). Furthermore, if the true distribution follows a Cox model, then both \\widehat\\beta^{(a)} and \\widehat\\Lambda_0^{(a)} are strongly consistent and asymptotically normal estimator of the true parameters \\beta^{(a)} and \\Lambda^{(a)}, see Kalbfleisch and Prentice (2002), Sec 5.7. When using a T-learner approach, one simply finds (\\widehat\\beta^{(a)},\\widehat\\Lambda_0^{(a)}) for a \\in \\{0,1\\} by considering the control group and the treated group separately. When using a S-learner approach, the treatment status A becomes a covariate a the model becomes \n\\lambda(t|X,A) = \\lambda_0(t) \\exp(X^\\top\\beta+\\alpha A).\n\\tag{19} for some \\alpha \\in \\mathbb{R}. One main advantage of Cox’s model is that it makes it very easy to interpret the effect of a covariate on the survival time. If indeed \\alpha &gt; 0, then the treatment has a negative effect of the survival times. Likewise, if \\beta_i &gt;0, then the i-th coordinate of X has a negative effect as well. We finally mention that the hazard ratio takes a particularly simple form under the later model since \n\\theta_{\\mathrm{HR}} = e^{\\alpha}.\n In particular, it does not depends on the time horizon \\tau, and is thus sometimes refered to as proportional hazard. Figure 4 illustrates the estimation of the difference in Restricted Mean Survival Time using G-formula with Cox models.\n\n\n\n\n\n\nFigure 4: Illustration of the G-formula for estimating \\theta_{\\mathrm{RMST}} in an RCT when only one covariate X_1 influences the outcome.\n\n\n\nWeibull Model. A popular parametric model for survival is the Weibull Model, which amounts to assume that \n\\lambda^{(a)}(t|X) = \\lambda_0^{(a)}(t) \\exp(X^\\top\\beta)\n where \\lambda_0^{(a)}(t) is the instant hazard function of a Weibull distribution, that is to say a function proportional to t^{\\gamma} for some shape parameter \\gamma &gt;0. We refer to Zhang (2016) for a study of this model.\nSurvival Forests. On the non-parametric front, we mention the existence of survival forests (Ishwaran et al. 2008).\n\n\n2.2.2 Censoring unbiased transformations\nCensoring unbiased transformations involve applying a transformation to T. Specifically, we compute a new time T^* of the form \nT^* := T^*(\\widetilde T,X,A,\\Delta) = \\begin{cases}\n\\phi_0(\\widetilde T \\wedge \\tau,X,A) \\quad &\\text{if} \\quad \\Delta^\\tau = 0, \\\\\n\\phi_1(\\widetilde T \\wedge \\tau,X,A) \\quad &\\text{if} \\quad \\Delta^\\tau = 1.\n\\end{cases}\n\\tag{20} for two wisely chosen transformations \\phi_0 and \\phi_1, and where \\Delta^{\\tau}:=\\mathbb{I}\\{T \\wedge \\tau \\leqslant C\\} = \\Delta+(1-\\Delta)\\mathbb{I}(\\widetilde T \\geqslant\\tau)\n\\tag{21} is the indicator of the event where the individual is either uncensored or censored after time \\tau. The idea behind the introduction of \\Delta^\\tau is that because we are only interested in computed the expectation of the survival time thresholded by \\tau, any censored observation coming after time \\tau can in fact be considered as uncensored (\\Delta^\\tau = 1).\nA censoring unbiased transformation T^* shall satisfy: for a \\in \\{0,1\\}, it holds \n\\mathbb{E}[T^*|A=a,X] = \\mathbb{E}[T(a) \\wedge \\tau |X] \\quad\\text{almost surely.}\n\\tag{22} A notable advantage of this approach is that it enables the use of the full transformed dataset (X_i,A_i,T^*_i) as if no censoring occured. Because it holds \n\\mathbb{E}[\\mathbb{E}[T^*|A=a,X]] = \\mathbb{E}\\left[\\frac{\\mathbb{I}\\{A=a\\}}{\\mathbb{P}(A=a)} T^*\\right],\n\\tag{23} there is a very natural way to derive an estimator of the difference in RMST from any censoring unbiased transformation T^* as: \n\\widehat\\theta = \\frac1n\\sum_{i=1}^n \\left(\\frac{A_i}{\\pi}-\\frac{1-A_i}{1-\\pi} \\right) T^*_i\n\\tag{24} where \\pi = \\mathbb{P}(A=1) \\in (0,1) by Assumption 6 and where T^*_i = T^*(\\widetilde T_i,X_i,A_i,\\Delta_i). We easily get the following result.\n\nProposition 3 Under Assumptions 5 and 6, the estimator \\widehat\\theta derived as in Equation 24 from a square integrable censoring unbiased transformations satisfying Equation 22 is an unbiased, strongly consistent, and asymptotically normal estimator of the difference in RMST.\n\nSquare integrability will be ensured any time the transformnation is bounded, which will always be the case of the ones considered in this work. It is natural in a RCT setting to assume that probability of being treated \\pi is known. If not, it is usual to replace \\pi by its empirical counterpart \\widehat\\pi = n_1/n where n_a = \\sum_{i} \\mathbb{1}\\{A=a\\}. The resulting estimator takes the form \n\\widehat\\theta = \\frac1{n_1}\\sum_{A_i = 1}  T^*_i - \\frac1{n_0}\\sum_{A_i = 0}  T^*_i.\n\\tag{25} Note however that this estimator is slighlty biased due to the estimation of \\pi (see for instance Colnet et al. (2022), Lemma 2), but it is still strongly consistent and asymptotically normal, and its biased is exponentially small in n.\n\nProposition 4 Under Assumptions 5 and 6, the estimator \\widehat\\theta derived as in Equation 25 from a square integrable censoring unbiased transformations satisfying Equation 22 is a strongly consistent, and asymptotically normal estimator of the difference in RMST.\n\nThe two most popular transformations are Inverse-Probability-of-Censoring Weighting (Koul, Susarla, and Ryzin (1981)) and Buckley-James (Buckley and James (1979)), both illustrated in Figure 5 and detailed below. In the former, only non-censored observations are considered and they are weighted while in the latter, censored observations are imputed with an estimated survival time.\n\n\n\n\n\n\nFigure 5: Illustration of Inverse-Probability-of-Censoring and Buckley-James transformations.\n\n\n\nThe Inverse-Probability-of-Censoring Weighted transformation\nThe Inverse-Probability-of-Censoring Weighted (IPCW) transformation, introduced by (Koul, Susarla, and Ryzin (1981)) in the context of censored linear regression, involves discarding censored observations and applying weights to uncensored data. More precisely, we let \nT^*_{\\mathrm{IPCW}}=\\frac{\\Delta^\\tau}{G(\\widetilde{T}\\wedge \\tau|X,A)} \\widetilde{T} \\wedge \\tau,\n\\tag{26} where we recall that G(t|X,A) :=\\mathbb{P}(C \\geqslant t|X,A) is the left limit of the conditional survival function of the censoring. This estimator assigns higher weights to uncensored subjects within a covariate group that is highly prone to censoring, thereby correcting for conditionally independent censoring and reducing selection bias (Howe et al. 2016).\n\nProposition 5 Under Assumptions 1, 5, 6, 16 and 17, the IPCW transform 26 is a censoring unbiased transformation in the sense of Equation 22.\n\nThe proof of Proposition 5 is in Section 8.2. The IPCW depends on the unknown conditional survival function of the censoring G(\\cdot|X,A), which thus needs to be estimated. Estimating conditional censoring or the conditional survival function can be approached similarly, as both involve estimating a time—whether for survival or censoring. Consequently, we can use semi-parametric methods, such as the Cox model, or non-parametric approaches like survival forests, and we refer to Section 2.2.1 for a development on these approaches. Once an estimator \\widehat G(\\cdot|A,X) of the later is provided, one can construct an estimator of the difference in RMST based on Equation 24 or Equation 25 \n\\widehat\\theta_{\\mathrm{IPCW}} = \\frac1n \\sum_{i=1}^n \\left(\\frac{A_i}{\\pi}-\\frac{1-A_i}{1-\\pi}\\right) T^*_{\\mathrm{IPCW},i},\n\\tag{27} or \n\\widehat\\theta_{\\mathrm{IPCW}} = \\frac1{n_1}\\sum_{A_i = 1}  T^*_{\\mathrm{IPCW},i} - \\frac1{n_0}\\sum_{A_i = 0}  T^*_{\\mathrm{IPCW},i}.\n\\tag{28} where we recall that n_a := \\#\\{i \\in [n]~|~A_i=a\\}. By Proposition 3, Proposition 4 and Proposition 5, we easily deduce that \\widehat\\theta_{\\mathrm{IPCW}} is asymptotically consistent as soon as \\widehat G is.\n\nCorollary 1 Under Assumptions1, 5, 6, 16 and 17, if \\widehat G is uniformly weakly (resp. strongly) consistent then so is \\widehat\\theta_{\\mathrm{IPCW}}, either as in defined in Equation 27 or in Equation 28.\n\nThis result simply comes from the fact that \\widehat\\theta_{\\mathrm{IPCW}} depends continuously on \\widehat G and that G is lower-bounded (Assumption 17). Surprisingly, we found limited use of this estimator in the literature, beside its first introduction in Koul, Susarla, and Ryzin (1981). This could potentially be explained by the fact that, empirically, we observed that this estimator is highly variable. Consequently, we do not explore its properties further and will not include it in the numerical experiments. A related and more popular estimator is the IPCW-Kaplan-Meier, defined as follows.\n\nDefinition 3 (IPCW-Kaplan-Meier) We let again \\widehat G(\\cdot|X,A) be an estimator of the (left limit of) the conditional censoring survival function and we introduce\n\\begin{align*}\nD_k^{\\mathrm{IPCW}}(a) &:= \\sum_{i=1}^n \\frac{\\Delta_i^\\tau}{\\widehat G(\\widetilde T_i \\wedge\\tau | X_i,A=a)} \\mathbb{I}(\\widetilde T_i = t_k, A_i=a) \\\\\n\\quad\\text{and}\\quad N^{\\mathrm{IPCW}}_k(a) &:= \\sum_{i=1}^n \\frac{\\Delta_i^\\tau}{\\widehat G(\\widetilde T_i \\wedge\\tau | X_i,A=a)} \\mathbb{I}(\\widetilde T_i \\geqslant t_k, A_i=a),\n\\end{align*}\nbe the weight-corrected numbers of deaths and of individual at risk at time t_k. The IPCW version of the KM estimator is then defined as: \n\\begin{aligned}\n\\widehat{S}_{\\mathrm{IPCW}}(t | A=a) &= \\prod_{t_k \\leqslant t}\\left(1-\\frac{D_k^{\\mathrm{IPCW}}(a)}{N_k^{\\mathrm{IPCW}}(a)}\\right).\n\\end{aligned}\n\n\nNote that the quantity \\pi is not present in the definition of D_k^{\\mathrm{IPCW}}(a) and N_k^{\\mathrm{IPCW}}(a) because it would simply disappear in the ratio D_k^{\\mathrm{IPCW}}(a)/N_k^{\\mathrm{IPCW}}(a). The subsequent RMST estimator then take the form \n\\widehat{\\theta}_{\\mathrm{IPCW-KM}} = \\int_{0}^{\\tau}\\widehat{S}_{\\mathrm{IPCW}}(t|A=1)-\\widehat{S}_{\\mathrm{IPCW}}(t|A=0)dt.\n\\tag{29} Like before for the classical KM estimator, this new reweighted KM estimator enjoys good statistical properties.\n\nProposition 6 Under Assumptions 1, 5, 6, 16 and 17, and for all t \\in [0,\\tau], the oracle estimator S^*_{\\mathrm{IPCW}}(t|A=a) defined as in Definition 3 with \\widehat G = G is a stronlgy consistent and asymptotically normal estimator of S^{(a)}(t) .\n\nThe proof of Proposition 6 can be found in Section 8.2. Because the evaluation of N_k^{\\textrm{IPCW}}(a) now depends on information gathered after time t_k (through the computation of the weights), the previous proofs on the absence of bias and on the derivation of the asymptotic variance unfortunately do not carry over in this case. Whether its bias is exponentially small and whether the asymptotic variance can be derived in a closed form are questions left open. We are also not aware of any estimation schemes for the asymptotic variance in this context. In the case where we do not have access to the oracle survival function G, we can again still achieve consistency if the estimator \\widehat G(\\cdot|A,X) that we provide is consistent.\n\nCorollary 2 Under Assumptions 1, 5, 16 and 17, if \\widehat G is uniformly weakly (resp. strongly) consistent then so is \\widehat S_{\\mathrm{IPCW}}(t|A=a).\n\nThis corollary ensures that the corresponding RMST estimator defined in Equation 29 will be consistent as well.\nThe Buckley-James transformation\nOne weakness of the IPCW transformation is that it discards all censored data. The Buckley-James (BJ) transformation, introduced by (Buckley and James (1979)), takes a different path by leaving all uncensored values untouched, while replacing the censored ones by an extrapolated value. Formally, it is defined as follows:\n\n\\begin{aligned}\nT^*_{\\mathrm{BJ}} &= \\Delta^\\tau (\\widetilde{T}\\wedge\\tau) + (1-\\Delta^\\tau) Q_S(\\widetilde T \\wedge \\tau|X,A),\n\\end{aligned}\n\\tag{30}\nwhere, for t \\leqslant\\tau, Q_S(t|X,A) :=\\mathbb{E}[T \\wedge \\tau | X,A,T \\wedge \\tau &gt; t]= \\frac{1}{S(t|X,A)}\\int_{t}^{\\tau} S(u|X,A) \\mathop{}\\!\\mathrm{d}u where S(t|X,A=a) := \\mathbb{P}(T(a) &gt; t|X) is the conditional survival function. We refer again to Figure 5 for a diagram of this transformation.\n\nProposition 7 Under Assumptions 1, 5, 16 and 17, the BJ transform 30 is a censoring unbiased transformation in the sense of Equation 22.\n\nThe proof of Proposition 7 can be found in Section 8.2. Again, the BJ transformation depends on a nuisance parameter (here Q_S(\\cdot|X,A)) that needs to be estimated. We again refer to Section 2.2.1 for a brief overview of possible estimation strategies for Q_S. Once provided with an estimator \\widehat Q_S(\\cdot|A,X), a very natural estimator of the RMST based on the BJ transformation and on Equation 24 or Equation 25 would be \n\\widehat\\theta_{\\mathrm{BJ}} = \\frac1n \\sum_{i=1}^n \\left(\\frac{A_i}{\\pi}-\\frac{1-A_i}{1-\\pi}\\right) T^*_{\\mathrm{BJ},i},\n\\tag{31} or \n\\widehat\\theta_{\\mathrm{BJ}} = \\frac1{n_1} \\sum_{A_i=1}  T^*_{\\mathrm{BJ},i}-\\frac1{n_0} \\sum_{A_0=1}  T^*_{\\mathrm{BJ},i}.\n\\tag{32} Like for the IPCW transformation, the BJ transformation yields a consistent estimate of the RMST as soon as the model is well-specified.\n\nCorollary 3 Under Assumptions 1, 5, 16 and 17, if \\widehat Q_S is uniformly weakly (resp. strongly) consistent then so is \\widehat\\theta_{\\mathrm{BJ}} defined as in Equation 31 or Equation 32.\n\nThe proof is again a mere application of Propositions 3, 4 and 7, and relies on the continuity of S \\mapsto Q_S. The BJ transformation is considered as the best censoring transformation of the original response in the following sense.\n\nTheorem 1 For any transformation T^* of the form 20, it holds \n\\mathbb{E}[(T^*_{\\mathrm{BJ}}-T \\wedge \\tau)^2] \\leqslant\\mathbb{E}[(T^*-T \\wedge \\tau)^2].\n\n\nThis result is stated in Fan and Gijbels (1994) but without a proof. We detail it in Section 8.2 for completeness.\n\n\n2.2.3 Augmented corrections\nThe main disadvantage of the two previous transformations is that they heavily rely on the specification of good estimator \\widehat G (for IPCW) or \\widehat S (for BJ). In order to circumvent this limitation, D. Rubin and Laan (2007) proposed the following transformations, whose expression is based on theory of semi-parametric estimation developed in Laan and Robins (2003),\n\nT^*_\\mathrm{DR} = \\frac{\\Delta^\\tau \\widetilde T\\wedge \\tau}{G(\\widetilde T \\wedge \\tau|X,A)} + \\frac{(1-\\Delta^\\tau)Q_S(\\widetilde T \\wedge \\tau |X,A)}{G(\\widetilde T \\wedge \\tau |X,A)}- \\int_0^{\\widetilde T \\wedge \\tau} \\frac{Q_S(t|X,A)}{G(t|X,A)^2} \\mathop{}\\!\\mathrm{d}\\mathbb{P}_C(t|X,A),\n\\tag{33} where \\mathop{}\\!\\mathrm{d}\\mathbb{P}_C(t|X,A) is the distribution of C conditional on the covariates X and A. We stress that this distribution is entirely determined by the G(\\cdot|X,A), so that this transformation only depends on the knowledge of both conditional survival functions G and S, will be thus sometimes denoted T^*_\\mathrm{DR}(G,S) to underline this dependency. This transformation is not only a censoring unbiased transform in the sense of Equation 22, but is also doubly robust in the following sense.\n\nProposition 8 We let F,R be two conditional survival functions. Under Assumptions 1, 5, 6, 16 and 17, if F also satisfies Assumption 17, and if F(\\cdot|X,A) is absolutely continuous wrt G(\\cdot|X,A), then the transformation T^*_\\mathrm{DR} = T^*_\\mathrm{DR}(F,R) is a censoring unbiased transformation in the sense of Equation 22 whenever F = G or R=S.\n\nThe statement and proof of this results is found in D. Rubin and Laan (2007) in the case where C and T are continuous. A careful examination of the proofs show that the proof translates straight away to our discrete setting."
  },
  {
    "objectID": "Notebook_causal_survival.html#sec-obs_indcen",
    "href": "Notebook_causal_survival.html#sec-obs_indcen",
    "title": "\n        \n         Causal survival analysis",
    "section": "3.1 Independent censoring",
    "text": "3.1 Independent censoring\nFigure 6 illustrates a causal graph in observational survival data with independent censoring (Assumption 8).\n\n\n\n\n\n\nFigure 6: Causal graph in observational survival data with independent censoring.\n\n\n\nUnder Assumption 8, we saw in Section 2.1 that the Kaplan-Meier estimator could conveniently handle censoring. Building on Equation 37, we can write \nS^{(1)}(t) = \\mathbb{E}\\left[\\frac{\\mathbb{E}[\\mathbb{I}\\{A=1,T &gt; t\\}|X]}{\\mathbb{E}[\\mathbb{I}\\{A=1\\}|X]} \\right]=\\mathbb{E}\\left[\\frac{A\\mathbb{I}\\{T &gt; t\\}}{e(X)} \\right],\n which suggests to adapt the classical KM estimator by reweighting it by the propensity score. The use of propensity score in causal inference has been initially introduced by Rosenbaum and Rubin (1983) and further developed in Hirano, Imbens, and Ridder (2003). It was extended to survival analysis by Xie and Liu (2005) through the adjusted Kaplan-Meier estimator as defined below.\n\nDefinition 4 (IPTW Kaplan-Meier estimator) We let \\widehat e(\\cdot) be an estimator of the propensity score e(\\cdot). We introduce\n\\begin{align*}\nD_k^{\\mathrm{IPTW}}(a) &:= \\sum_{i=1}^n \\left(\\frac{a}{\\widehat e(X_i)}+\\frac{1-a}{1- \\widehat e(X_i)}\\right)\\mathbb{I}(\\widetilde T_i = t_k, \\Delta_i = 1, A_i=a) \\\\\n\\quad\\text{and}\\quad N^{\\mathrm{IPTW}}_k(a) &:= \\sum_{i=1}^n \\left(\\frac{a}{\\widehat e(X_i)}+\\frac{1-a}{1- \\widehat e(X_i)}\\right) \\mathbb{I}(\\widetilde T_i \\geqslant t_k, A_i=a),\n\\end{align*}\nbe the numbers of deaths and of individual at risk at time t_k, reweighted by the propensity score. The Inverse-Probability-of-Treatment Weighting (IPTW) version of the KM estimator is then defined as: \n\\begin{aligned}\n\\widehat{S}_{\\mathrm{IPTW}}(t | A=a) &= \\prod_{t_k \\leqslant t}\\left(1-\\frac{D_k^{\\mathrm{IPTW}}(a)}{N_k^{\\mathrm{IPTW}}(a)}\\right).\n\\end{aligned}\n\\tag{38}\n\nWe let S^*_{\\mathrm{IPTW}}(t | A=a) be the oracle KM-estimator defined as above with \\widehat e(\\cdot) = e(\\cdot). Although the reweighting slightly changes the analysis, the good properties of the classical KM carry on to this setting.\n\nProposition 9 Under Assumptions 1, 34, 35, 8 and 9 The oracle IPTW Kaplan-Meier estimator S^*_{\\mathrm{IPTW}}(t | A=a) is a strongly consistent and asymptotically normal estimator of S^{(a)}(t).\n\nThe proof of this result simply relies again on the law of large number and the \\delta-method and can be found in Section 8.3. Because now S^*_{\\mathrm{IPTW}} is a continuous function of e(\\cdot), and because e and 1-e are lower-bounded as per Assumptions 35, we easily derive the following corollary.\n\nCorollary 4 Under the same assumptions as Proposition 9, if \\widehat e(\\cdot) satisfies \\|\\widehat e-e\\|_{\\infty} \\to 0 almost surely (resp. in probability), then the IPTW Kaplan-Meier estimator \\hat S_{\\mathrm{IPTW}}(t | A=a) is a strongly (resp. weakly) consistent estimator of S^{(a)}(t).\n\nThe resulting RMST estimator simply takes the form: \n\\widehat{\\theta}_{\\mathrm{IPTW-KM}} = \\int_{0}^{\\tau}\\widehat{S}_{\\mathrm{IPTW}}(t|A=1)-\\widehat{S}_{\\mathrm{IPTW}}(t|A=0)dt.\n\\tag{39} which will be consistent under the same Assumptions as the previous Corollary. Note that, we are not aware of any formal results concerning the bias and the asymptotic variance of the oracle estimator S^*_{\\mathrm{IPTW}}(t | A=a), and we refer to Xie and Liu (2005) for heuristics concerning these questions."
  },
  {
    "objectID": "Notebook_causal_survival.html#sec-obscondcens",
    "href": "Notebook_causal_survival.html#sec-obscondcens",
    "title": "\n        \n         Causal survival analysis",
    "section": "3.2 Conditional independent censoring",
    "text": "3.2 Conditional independent censoring\nUnder Assumptions 34 (uncounfoundedness) and 16 (conditional independent censoring), the causal effect is affected both by confounding variables and by conditional censoring. The associated causal graph is depicted in Figure 7. In this setting, one can still use the G-formula exactly as in Section 2.2.1.\nA natural alternative approach is to weight the IPCW and BJ transformations from Section 2.2.2 by the propensity score to disentangle both confounding effects and censoring at the same time.\n\n\n\n\n\n\nFigure 7: Causal graph in observational survival data with dependent censoring.\n\n\n\nWe mention that the G-formula approach developed in Section 2.2.1 does work in that context. In particular, Chen and Tsiatis (2001) prove consistency and asymptotic normality results for Cox estimators in a observational study, and they give an explicit formulation of the asymptotic variance as a function of the parameters of the Cox model. In the non-parametric world, Foster, Taylor, and Ruberg (2011) and Künzel et al. (2019) empirically study this estimator using survival forests, with the former employing it as a T-learner (referred to as Virtual Twins) and the latter as an S-learner.\n\n3.2.1 IPTW-IPCW transformations\nOne can check that the IPCW transformation as introduced in Equation 26 is also a censoring unbiased transformation in that context.\n\nProposition 10 Under Assumptions 1, 34, 35, 16 and 17, the IPTW-IPCW transform 26 is a censoring unbiased transformation in the sense of Equation 22.\n\nThe proof of Proposition 10 can be found in Section 8.4. Deriving an estimator of the difference in RMST is however slightly different in that context. In particular, Equation 23 rewrites \n\\mathbb{E}[\\mathbb{E}[T^*|X,A=1]] = \\mathbb{E}\\left[\\frac{A}{e(X)} T^*\\right],\n Which in turn suggests to define \n\\widehat\\theta_{\\mathrm{IPTW-IPCW}} = \\frac1n\\sum_{i=1}^n  \\left(\\frac{A}{e(X)}-\\frac{1-A}{1-e(X)} \\right) T^*_{\\mathrm{IPCW},i}.\n\\tag{40}\nThis transformation now depends on two nuisance parameters, namely the conditional survival function of the censoring (through T^*_{\\mathrm{IPCW}}) and the propensity score. Once estimators of these quantities are provided, one could look at the corresponding quantity computed with these estimators.\n\nProposition 11 Under Assumptions 1, 34, 35, 16 and 17, and if \\widehat G(\\cdot|X,A) and \\widehat e (\\cdot) are uniformly weakly (resp. strongly) consistent estimators, then estimator 40 defined with \\widehat e and \\widehat G is a weakly (resp. strongly) consistent estimator of the difference in RMST.\n\nThe proof of Proposition 11 can be found in Section 8.4. We can also use the same strategy as for the IPCW transformation and incorporate the new weights into a Kaplan-Meier estimator.\n\nDefinition 5 (IPTW-IPCW-Kaplan-Meier) We let again \\widehat G(\\cdot|X,A) and \\widehat e(\\cdot) be estimators of the conditional censoring survival function and of the propensity score. We introduce\n\\begin{align*}\nD_k^{\\mathrm{IPTW-IPCW}}(a) &:= \\sum_{i=1}^n \\left(\\frac{A_i}{\\widehat e(X_i)}+\\frac{1-A_i}{1-\\widehat e(X_i)} \\right)\\frac{\\Delta_i^\\tau}{\\widehat G(\\widetilde T_i \\wedge\\tau | X_i,A=a)} \\mathbb{I}(\\widetilde T_i = t_k, A_i=a) \\\\\n\\quad\\text{and}\\quad N^{\\mathrm{IPTW-IPCW}}_k(a) &:= \\sum_{i=1}^n \\left(\\frac{A_i}{\\widehat e(X_i)}+\\frac{1-A_i}{1-\\widehat e(X_i)} \\right)\\frac{\\Delta_i^\\tau}{\\widehat G(\\widetilde T_i \\wedge\\tau | X_i,A=a)} \\mathbb{I}(\\widetilde T_i \\geqslant t_k, A_i=a),\n\\end{align*}\nbe the weight-corrected numbers of deaths and of individual at risk at time t_k. The IPTW-IPCW version of the KM estimator is then defined as: \n\\begin{aligned}\n\\widehat{S}_{\\mathrm{IPTW-IPCW}}(t | A=a) &= \\prod_{t_k \\leqslant t}\\left(1-\\frac{D_k^{\\mathrm{IPTW-IPCW}}(a)}{N_k^{\\mathrm{IPTW-IPCW}}(a)}\\right).\n\\end{aligned}\n\n\nThe difference in RMST estimated with IPTW-IPCW-Kaplan-Meier survival curves is then simply as\n\n\\widehat{\\theta}_{\\mathrm{IPTW-IPCW-KM}} = \\int_{0}^{\\tau}\\widehat{S}_{\\mathrm{IPTW-IPCW}}(t|A=1)-\\widehat{S}_{\\mathrm{IPTW-IPCW}}(t|A=0)dt.\n\\tag{41}\n\nProposition 12 Under Assumptions 1, 34, 35, 16 and 17, and for all t \\in [0,\\tau], if the oracle estimator S^*_{\\mathrm{IPTW-IPCW}}(t | A=a) defined as in Definition 5 with \\widehat G(\\cdot|A,X) = G(\\cdot|A,X) and \\widehat e = e is a strongly consistent and asymptotically normal estimator of S^{(a)}(t) .\n\nThe proof of Proposition 12 can be found in Section 8.4. Under consistency of the estimators of the nuisance parameters, the previous proposition implies that this reweighted Kaplan-Meier is a consistent estimator of the survival curve, which in turn implies consistency of \\widehat{\\theta}_{\\mathrm{IPTW-IPCW-KM}}.\n\nCorollary 5 Under Assumptions 1, 34, 35, 16 and 17, and for all t \\in [0,\\tau], if the nuisance estimators \\widehat G(\\cdot|A,X) and \\widehat e are weakly (resp. strongly) uniformly consistent, then \\widehat{S}_{\\mathrm{IPTW-IPCW}}(t | A=a) is a weakly (resp. strongly) consistent estimator of S^{(a)}(t).\n\nWe are not aware of general formula for the asymptotic variances in this context. We mention nonetheless that Schaubel and Wei (2011) have been able to derive asymptotic laws in this framework in the particular case of Cox-models.\n\n\n3.2.2 IPTW-BJ transformations\nLike IPCW tranformation, BJ transformation is again a censoring unbiased transformation in an observational context.\n\nProposition 13 Under Assumptions 1, 34, 35, 16 and 17, the IPTW-BJ transform 30 is a censoring unbiased transformation in the sense of Equation 22.\n\nThe proof of Proposition 13 can be found in Section 8.4. The corresponding estimator of the difference in RMST is \n\\hat \\theta_{\\mathrm{IPTW-BJ}} = \\frac1n\\sum_{i=1}^n  \\left(\\frac{A}{e(X)}-\\frac{1-A}{1-e(X)} \\right) T^*_{\\mathrm{BJ},i}.\n\\tag{42}\nThis transformation depends on the conditional survival function S (through T^*_{\\mathrm{BJ}}) and the propensity score. Consistency of the nuisance parameter estimators implies again consistency of the RMST estimator.\n\nProposition 14 Under Assumptions 1, 34, 35, 16 and 17, and if \\widehat S(\\cdot|X,A) and \\widehat e (\\cdot) are uniformly weakly (resp. strongly) consistent estimators, then \\widehat\\theta_{\\mathrm{IPTW-BJ}} defined with \\widehat S and \\widehat e is a weakly (resp. strongly) consistent estimator of the RMST.\n\nThe proof of Proposition 14 can be found in Section 8.4.\n\n\n3.2.3 Double augmented corrections\nBuilding on the classical doubly-robust AIPTW estimator from causal inference (Robins, Rotnitzky, and Zhao 1994), we could incorporate the doubly-robust transformations of Section 2.2.3 to obtain a quadruply robust tranformation \n\\Delta^*_{\\mathrm{QR}} = \\Delta^*_{\\mathrm{QR}}(G,S,\\mu,e)  := \\left(\\frac{A}{e(X)}-\\frac{1-A}{1-e(X)}\\right)(T^*_{\\mathrm{DR}}(G,S)-\\mu(X,A))+\\mu(X,1)-\\mu(X,0),\n where we recall that T^*_{\\mathrm{DR}} is defined in Section 2.2.3. This transformations depends on four nuisance parameters: G and S through T^*_{\\mathrm{DR}}, and now the propensity score e and the conditional response \\mu. This transformation doesn’t really fall into the scope of censoring unbiased transform, but it is easy to show that \\Delta^*_{\\mathrm{QR}} is quadruply robust in the following sense.\n\nProposition 15 Let F,R be two conditional survival function, p be a propensity score, and \\nu be a conditional response. Then, under the same assumption on F,R as in Proposition 8, and under Assumptions 1, 34, 35, 16 and 17, the transformations \\Delta^*_{\\mathrm{QR}} = \\Delta^*_{\\mathrm{QR}}(F,R,p,\\nu) satisfies, fo a \\in {0,1}, \n\\mathbb{E}[ \\Delta^*_\\mathrm{QR} |X] = \\mathbb{E}[T(1)\\wedge \\tau-T(0)\\wedge \\tau |X]\\quad\\text{if}\\quad  \n\\begin{cases} F = G \\quad &\\text{or}\\quad R=S \\quad \\text{and} \\\\\np=e \\quad &\\text{or}\\quad \\nu=\\mu.\n\\end{cases}\n\n\nThis result is similar to Ozenne et al. (2020), Thm 1, and its proof can be found in Section 8.4. Based on estimators (\\widehat G, \\widehat S, \\widehat\\mu, \\widehat e) of (G,S,\\mu,e), one can then propose the following estimator of the RMST, coined the AIPTW-AIPCW estimator in Ozenne et al. (2020): \n\\begin{aligned}\n\\widehat\\theta_{\\mathrm{AIPTW-AIPCW}} &:= \\frac1n \\sum_{i=1}^n \\Delta_{\\mathrm{QR},i}^*(\\widehat G, \\widehat S, \\widehat\\mu, \\widehat e)\n\\\\\n&=\\frac1n \\sum_{i=1}^n \\left(\\frac{A_i}{\\widehat e(X_i)}-\\frac{1-A_i}{1-\\widehat e(X_i)}\\right)(T^*_{\\mathrm{DR}}(\\widehat G,\\widehat S)_i-\\widehat\\mu(X_i,A_i)) + \\widehat\\mu(X_i,1)-\\widehat\\mu(X_i,0).\n\\end{aligned}\n\\tag{43} This estimator enjoys good asymptotic properties under parametric models, as detailed in Ozenne et al. (2020)."
  },
  {
    "objectID": "Notebook_causal_survival.html#sec-summary",
    "href": "Notebook_causal_survival.html#sec-summary",
    "title": "\n        \n         Causal survival analysis",
    "section": "4.1 Summary of the estimators",
    "text": "4.1 Summary of the estimators\nTable 3 provides an overview of the estimators introduced in this paper, along with the corresponding nuisance parameters needed for their estimation and an overview of their statistical properties in particular regarding their sensitivity to misspecification of the nuisance parameters.\n\n\n\nTable 3: Estimators of the difference in RMST and nuisance parameters needed to compute each estimator. Empty boxes indicate that the nuisance parameter is not needed in the estimator thus misspecification has no impact. Estimators in italic are those that are already implemented in available packages.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEstimator\nRCT\nObs\nInd Cens\nDep Cens\nOutcome model\nCensoring model\nTreatment model\nRobustness\n\n\n\n\nUnadjusted KM\n\\color{green}X\n\n\\color{green}X\n\n\n\n\n\n\n\nIPCW-KM\n\\color{green}X\n\n\\color{green}X\n\\color{green}X\n\nG\n\n\n\n\nBJ\n\\color{green}X\n\n\\color{green}X\n\\color{green}X\nS\n\n\n\n\n\nIPTW-KM\n\\color{green}X\n\\color{green}X\n\\color{green}X\n\n\n\ne\n\n\n\nIPCW-IPTW-KM\n\\color{green}X\n\\color{green}X\n\\color{green}X\n\\color{green}X\n\nG\ne\n\n\n\nIPTW-BJ\n\\color{green}X\n\\color{green}X\n\\color{green}X\n\\color{green}X\nS\n\ne\n\n\n\nG-formula\n\\color{green}X\n\\color{green}X\n\\color{green}X\n\\color{green}X\n\\mu\n\n\n\n\n\nAIPTW-AIPCW\n\\color{green}X\n\\color{green}X\n\\color{green}X\n{\\color{green}X}\nS,\\mu\nG\ne\n\\color{green}X (Prp 15)"
  },
  {
    "objectID": "Notebook_causal_survival.html#implementation-of-the-estimators",
    "href": "Notebook_causal_survival.html#implementation-of-the-estimators",
    "title": "\n        \n         Causal survival analysis",
    "section": "4.2 Implementation of the estimators",
    "text": "4.2 Implementation of the estimators\nAcross different implementations, we use the following shared functions provided in the \\texttt{utilitary.R} file.\n\n\\texttt{estimate\\_propensity\\_score}: function to estimate propensity scores e(X) using either parametric (i.e. logistic regression with the argument \\texttt{type\\_of\\_model = \"glm\"}) or non-parametric methods (i.e. probability forest with the argument \\texttt{type\\_of\\_model =\"probability forest\"} based on the \\texttt{probability\\_forest} function from the grf (Tibshirani et al. 2017) package). This latter can include cross-fitting (\\texttt{n.folds\\&gt;1}).\n\\texttt{estimate\\_survival\\_function}: function to estimate the conditional survival model, which supports either Cox models (argument \\texttt{type\\_of\\_model = \"cox\"}) or survival forests (argument \\texttt{type\\_of\\_model = \"survival forest\"}) which uses the function \\texttt{survival\\_forest} from the grf (Tibshirani et al. 2017) package. This latter can include cross-fitting (\\texttt{n.folds\\&gt;1}). The estimation can be done with a single learner (argument \\texttt{learner = \"S-learner\"}) or two learners (argument \\texttt{learner = \"T-learner\"}).\n\\texttt{estimate\\_hazard\\_function}: function to estimate the instantaneous hazard function by deriving the cumulative hazard function at each time point. This cumulative hazard function is estimated from the negative logarithm of the survival function.\n\\texttt{Q\\_t\\_hat}: function to estimate the remaining survival function at all time points and for all individuals which uses the former \\texttt{estimate\\_survival\\_function}.\n\\texttt{Q\\_Y}: function to select the value of the remaining survival function from \\texttt{Q\\_t\\_hat} at the specific time-to-event.\n\\texttt{integral\\_rectangles}: function to estimate the integral of a decreasing step function using the rectangle method.\n\\texttt{expected\\_survival}: function to estimate the integral with x,y coordinate (estimated survival function) using the trapezoidal method.\n\\texttt{integrate}: function to estimate the integral at specific time points \\texttt{Y.grid} of a given \\texttt{integrand} function which takes initially its values on \\texttt{times} using the trapezoidal method.\n\nUnadjusted Kaplan-Meier\nAlthough Kaplan-Meier is implemented in the \\texttt{survival} package (Therneau 2001), we provide a custom implementation, \\texttt{Kaplan\\_meier\\_handmade}, for completeness. The difference in Restricted Mean Survival Time, estimated using Kaplan-Meier as in Equation 14 can then be calculated with the \\texttt{RMST\\_1} function.\n\n\nHide/Show the code\nsource(\"utilitary.R\")\n# Kaplan-Meier estimator handmade implementation\n# The database 'data' must be in the same form as that shown in \n# notation (Table 1) and with the same variable names (status, T_obs) \nKaplan_meier_handmade &lt;- function(data, \n                                  status = data$status, \n                                  T_obs = data$T_obs) {\n  # Sort unique observed times\n  Y.grid &lt;- sort(unique(T_obs))\n  \n  # Initialize vectors for number of events, number at risk, and survival \n  # probability\n  d &lt;- rep(NA, length(Y.grid))  # Number of events at time Y.grid[i]\n  n &lt;- rep(NA, length(Y.grid))  # Number at risk just before time Y.grid[i]\n  S &lt;- rep(NA, length(Y.grid))  # Survival probability at time Y.grid[i]\n  \n  # Loop over each unique observed time\n  for (i in 1:length(Y.grid)) {\n    d[i] &lt;- sum(T_obs == Y.grid[i] & status == 1, na.rm = TRUE)  # Count events\n    n[i] &lt;- sum(T_obs &gt;= Y.grid[i])  # Count at risk\n    \n    # Calculate survival probability\n    S[i] &lt;- cumprod(1 - d / n)[i]\n  }\n  \n  # Create a dataframe with the results\n  df &lt;- data.frame(d = d, n = n, S = S, T = Y.grid)\n  \n  return(df)\n}\n\n\n# Function to calculate RMST (Restricted Mean Survival Time):\n# Two possibilities for computing RMST: \n# - in using directly S_A1 and S_A0 (survival function of treated and control)\n# - in using the dataframe and the function computes the survival functions\nRMST_1 &lt;- function(data = NULL, A1 = 1, A0 = 0, tau, S_A1 = NULL, S_A0 = NULL) {\n  if (is.null(S_A1) & is.null(S_A0)) {\n    # Subset data for treatment groups\n    data1 &lt;- data[data$A == A1,]\n    data0 &lt;- data[data$A == A0,]\n    \n    # Calculate Kaplan-Meier survival estimates\n    S_A1 &lt;- Kaplan_meier_handmade(data1, status = data1$status, \n                                  T_obs = data1$T_obs)\n    S_A0 &lt;- Kaplan_meier_handmade(data0, status = data0$status, \n                                  T_obs = data0$T_obs)\n    \n    # Restrict observations to those less than or equal to tau\n    Y.grid1 &lt;- data1$T_obs[data1$T_obs &lt;= tau]\n    Y.grid0 &lt;- data0$T_obs[data0$T_obs &lt;= tau]\n  } else {\n    # Restrict observations to those less than or equal to tau\n    Y.grid1 &lt;- S_A1$T[S_A1$T &lt;= tau]\n    Y.grid0 &lt;- S_A0$T[S_A0$T &lt;= tau]\n  }\n  \n  # Filter survival estimates to restricted observations\n  S_A1 &lt;- S_A1 %&gt;%\n    dplyr::filter(T %in% Y.grid1)\n  S_A0 &lt;- S_A0 %&gt;%\n    dplyr::filter(T %in% Y.grid0)\n  \n  # Check if there is any event at tau for S_A1\n  if (!any(S_A1$T == tau)) {\n    new_row &lt;- tibble(T = tau, S = S_A1$S[nrow(S_A1)])\n    S_A1 &lt;- dplyr::bind_rows(S_A1, new_row)\n  }\n  \n  # Check if there is any event at tau for S_A0\n  if (!any(S_A0$T == tau)) {\n    new_row &lt;- tibble(T = tau, S = S_A0$S[nrow(S_A0)])\n    S_A0 &lt;- dplyr::bind_rows(S_A0, new_row)\n  }\n\n  # Calculate integrals from 0 to tau of survival probabilities\n  intA1 &lt;- integral_rectangles(S_A1$T, S_A1$S)\n  intA0 &lt;- integral_rectangles(S_A0$T, S_A0$S)\n  RMST1 &lt;- intA1 - intA0\n  \n  return(list(RMST=RMST1, intA1=intA1,intA0=intA0))\n}\n\n\nAs an alternative, one can also use the \\texttt{survfit} function in the survival package (Therneau 2001) for Kaplan-Meier and specify the \\texttt{rmean} argument equal to \\tau in the corresponding summary function:\n\n\nHide/Show the code\n# Alternative code to estimate Kaplan-Meier estimator with survival package\n# instead of handmade KM\nRMST_alternative &lt;- function(data, A1 = 1, A0 = 0, tau){\n  # Estimate Kaplan-Meier estimator with survfit function on data subset\n   # Groupe A = 0\n  fit0 &lt;- survfit(Surv(T_obs, status) ~ 1, data = data[data$A == A0,]) \n  # Groupe A = 1\n  fit1 &lt;- survfit(Surv(T_obs, status) ~ 1, data = data[data$A == A1,])  \n\n  # Estimate the RMST with rmean\n  summary_fit0 &lt;- summary(fit0, rmean = tau)  # RMST for A = 0\n  summary_fit1 &lt;- summary(fit1, rmean = tau)  # RMST for A = 1\n\n  # Extract the RMST from the summary objects\n  rmst0 &lt;- summary_fit0$table[\"rmean\"][[1]]\n  rmst1 &lt;- summary_fit1$table[\"rmean\"][[1]]\n\n  # Compute the difference of RMST between the two groups\n  difference_rmst &lt;- rmst1 - rmst0\nreturn(difference_rmst)\n}\n\n\nIPCW Kaplan-Meier\nWe first provide an \\texttt{adjusted.KM} function which is then used in the \\texttt{IPCW\\_Kaplan\\_meier} function to estimate the difference in RMST \\hat{\\theta}_{\\mathrm{IPCW}} as in Equation 29. The survival censoring function G(t|X) is computed with the \\texttt{estimate\\_survival\\_function} utility function from the \\texttt{utilitary.R} file.\n\n\nHide/Show the code\n# Kaplan-Meier adjusted\n# Times of event \n# Failures:  1 if event, 0 if censored\n# Variable:  1 if treated, 0 if control\n# Weights:  Weight of the individual\nadjusted.KM &lt;- function(times, failures, variable, weights = NULL) {\n  # Sanity checks\n  if (sum(times &lt; 0) &gt; 0) {\n    stop(\"Error: times must be positive\")\n  }\n  if (!is.null(weights) && sum(weights &lt; 0, na.rm = TRUE) &gt; 0) {\n    stop(\"Error: weights must be superior to 0\")\n  }\n  if (sum(failures != 0 & failures != 1) &gt; 0) {\n    stop(\"Error: failures must be a vector of 0 or 1\")\n  }\n  # If 'weights' is NULL, initialize 'w' with ones of the same length as 'times', \n  # otherwise use 'weights'\n  w &lt;- if (is.null(weights)) rep(1, length(times)) else weights\n  \n  # Create a DataFrame 'data' with columns t (times), f (failures), \n  # v (stratification variable: often treatment variable), and w (weights)\n  data &lt;- data.frame(t = times, f = failures, v = variable, w = w)\n  \n  # Remove rows from the DataFrame where the stratification variable is NA\n  data &lt;- data[!is.na(data$v),]\n  \n  # Initialize an empty DataFrame to store the Kaplan-Meier results\n  table_KM &lt;- data.frame(times = NULL, n.risk = NULL, n.event = NULL, \n                         survival = NULL, variable = NULL)\n  \n  # Loop over each unique value of the stratification variable\n  for (i in unique(variable)) {\n    # Subset the data for the current stratification variable value\n    d &lt;- data[data$v == i,]\n    \n    # Create a sorted vector of unique event times, including time 0 and the \n    # maximum time\n    tj &lt;- c(0, sort(unique(d$t[d$f == 1])), max(d$t))\n    \n    # Calculate the number of events at each time point\n    dj &lt;- sapply(tj, function(x) {\n      sum(d$w[d$t == x & d$f == 1])\n    })\n    \n    # Calculate the number of individuals at risk at each time point\n    nj &lt;- sapply(tj, function(x) {\n      sum(d$w[d$t &gt;= x])\n    })\n    \n    # Compute the cumulative product for the survival probabilities\n    st &lt;- cumprod((nj - dj) / nj)\n    \n    # Append the results to the Kaplan-Meier table\n    table_KM &lt;- rbind(table_KM, data.frame(T = tj, n = nj, d = dj, \n                                           S = st, variable = i))\n  }\n  return(table_KM)\n}\n\n\n# IPCW Kaplan-Meier estimator with restricted tau\nIPCW_Kaplan_meier &lt;- function(data, tau, \n                              X.names.censoring, \n                              nuisance_censoring = \"cox\", \n                              n.folds = NULL) {\n  \n  # Compute of truncated T_obs, status and censored status\n  data$T_obs_tau &lt;- ifelse(data$T_obs &gt;= tau, tau, data$T_obs)\n  data$censor.status_tau &lt;- 1 - as.numeric((data$T_obs &gt;= tau) | \n                                             (data$T_obs &lt; tau & data$status == 1))\n  data$status_tau &lt;- as.numeric((data$T_obs &gt;= tau) | \n                                  (data$T_obs &lt; tau & data$status == 1))\n  Y.grid &lt;- sort(unique(data$T_obs_tau))\n  \n  # Estimate probability of remaining uncensored based on nuisance model \n  S_C_hat &lt;- estimate_survival_function(data = data, X.names = X.names.censoring,\n                                        Y.grid = Y.grid, T_obs = \"T_obs_tau\",\n                                        status = \"censor.status_tau\",\n                                        type_of_model = nuisance_censoring,\n                                        n.folds = n.folds)\n  \n  # Select the probability of censoring for each observed T_obs_tau from the \n  # curve\n  data$S_C &lt;- S_C_hat$S_hat[cbind(1:nrow(data), match(data$T_obs_tau, Y.grid))]\n  \n  # Compute IPC weights\n  data$weights &lt;- data$status_tau / data$S_C\n  \n  # Compute the adjusted IPCW Kaplan-Meier\n  S &lt;- adjusted.KM(times = data$T_obs, failures = data$status, \n                   variable = data$A, weights = data$weights)\n\n  # Compute differenceof RMST between the two groups\n  RMST &lt;- RMST_1(S_A1 = S[S$variable == 1,], S_A0 = S[S$variable == 0,], tau = tau)\n  \n  return(list(RMST = RMST$RMST,\n              intA1 = RMST$intA1,\n              intA0 = RMST$intA0,\n              weights = data$weights))\n}\n\n\nOne could also use the \\texttt{survfit} function in the survival package (Therneau 2001) in adding IPCW weights for treated and control group and specify the \\texttt{rmean} argument equal to \\tau in the corresponding summary function:\n\n\nHide/Show the code\n# Alternative code to estimate IPCW Kaplan-Meier, IPTW Kaplan-Meier or \n# IPTW-IPCW Kaplan-Meier estimator with survival package instead of using \n# handmade adjusted.KM function (the weights need to be calculated before).\n\n# Weights0 corresponds to weights of the control and weights1 of treated\nAdjusted_Kaplan_meier_alternative &lt;- function(data, A1 = 1, A0 = 0, tau, \n                                          weights0, weights1){\n  # Estimate Kaplan-Meier estimator with survfit function on data subset \n  # Groupe A = 0\n  fit0 &lt;- survfit(Surv(T_obs, status) ~ 1, data = data[data$A == A0,], weights = weights0)  \n  # Groupe A = 1\n  fit1 &lt;- survfit(Surv(T_obs, status) ~ 1, data = data[data$A == A1,], weights = weights1)  \n\n  # Estimate the RMST with rmean\n  summary_fit0 &lt;- summary(fit0, rmean = tau)  # RMST for A = 0\n  summary_fit1 &lt;- summary(fit1, rmean = tau)  # RMST for A = 1\n\n  # Extract the RMST from the summary objects\n  rmst0 &lt;- summary_fit0$table[\"rmean\"][[1]]\n  rmst1 &lt;- summary_fit1$table[\"rmean\"][[1]]\n\n  # Compute the difference in RMST between the two groups\n  difference_rmst &lt;- rmst1 - rmst0\nreturn(difference_rmst)\n}\n\n\nThis alternative approach for IPCW Kaplan-Meier would also be valid for IPTW and IPTW-IPCW Kaplan-Meier.\nBuckley-James based estimator \nThe function \\texttt{BJ} estimates \\theta_{\\mathrm{RMST}} by implementing the Buckley-James estimator as in Equation 31. It uses two functions available in the \\texttt{utilitary.R} file, namely \\texttt{Q\\_t\\_hat} and \\texttt{Q\\_Y}.\n\n\nHide/Show the code\n# Compute the Restricted Mean Survival Time (RMST) difference\nBJ &lt;- function(data, tau, X.names.outcome = c(\"X1\", \"X2\", \"X3\", \"X4\"),\n               nuisance = \"cox\", n.folds = NULL) {\n  # Truncate observed times at tau\n  data$T_obs_tau &lt;- ifelse(data$T_obs &gt;= tau, tau, data$T_obs)\n  Y.grid &lt;- sort(unique(data$T_obs_tau))\n  \n  # Censoring status at tau\n  data$status_tau &lt;- as.numeric((data$T_obs &gt;= tau) | \n                                (data$T_obs &lt; tau & data$status == 1))\n  \n  # Compute Q_t for all time points\n  Q_t &lt;- Q_t_hat(data, tau, X.names.outcome, nuisance, n.folds)\n  data$Q_y &lt;- Q_Y(data, tau, Q_t)\n  \n  # Split data by treatment group\n  data_treated &lt;- data %&gt;% dplyr::filter(A == 1)\n  data_not_treated &lt;- data %&gt;% dplyr::filter(A == 0)\n  \n  # Calculate Restricted Survival Time (RST) for each group\n  data_treated$RST &lt;- data_treated$status_tau * data_treated$T_obs_tau + \n                      (1 - data_treated$status_tau) * data_treated$Q_y\n  \n  data_not_treated$RST &lt;- data_not_treated$status_tau * data_not_treated$T_obs_tau + \n                          (1 - data_not_treated$status_tau) * data_not_treated$Q_y\n  \n  # Calculate RMST difference between treated and not treated\n  RMST &lt;- mean(data_treated$RST) - mean(data_not_treated$RST)\n  \n  # Return RMST and other relevant metrics\n  return(list(\n    RMST = RMST, \n    ATE_treated = mean(data_treated$RST), \n    ATE_not_treated = mean(data_not_treated$RST)\n  ))\n}\n\n\nIPTW Kaplan-Meier\nThe function \\texttt{IPTW\\_Kaplan\\_meier} implements the IPTW-KM estimator in Equation 39. It uses the \\texttt{estimate\\_propensity\\_score} function from the \\texttt{utilitary.R}.\n\n\nHide/Show the code\n# Function to calculate IPTW Kaplan-Meier\nIPTW_Kaplan_meier &lt;- function(data, tau, X.names.propensity, \n                              nuisance_propensity = \"glm\", n.folds = NULL) {\n  # Estimate propensity scores\n  data$e_hat &lt;- estimate_propensity_score(\n    data,\n    treatment_covariates = X.names.propensity,\n    type_of_model = nuisance_propensity,\n    n.folds = n.folds)\n  \n  # Truncate observed times at tau\n  data$T_obs_tau &lt;- pmin(data$T_obs, tau)\n  \n  # Define censoring status at tau\n  data$status_tau &lt;- as.numeric((data$T_obs &gt;= tau) | \n                                (data$T_obs &lt; tau & data$status == 1))\n  \n  # Calculate weights\n  data$weights &lt;- (data$A) * (1 / data$e_hat) + (1 - data$A) / (1 - data$e_hat)\n  \n  # Adjusted Kaplan-Meier estimator\n  S &lt;- adjusted.KM(\n    times = data$T_obs, \n    failures = data$status,\n    variable = data$A, \n    weights = data$weights)\n  \n  # Calculate RMST from the adjusted survival curves\n  RMST &lt;- RMST_1(S_A1 = S[S$variable == 1,], \n                 S_A0 = S[S$variable == 0,], \n                 tau = tau)\n  \n  return(list(\"intA0\" = RMST$intA0, \"intA1\" = RMST$intA1, \"RMST\" = RMST$RMST))\n}\n\n\nG-formula\nWe implement two versions of the G-formula: \\texttt{g\\_formula\\_T\\_learner} and \\texttt{g\\_formula\\_S\\_learner}. In \\texttt{g\\_formula\\_T\\_learner}, separate models estimate survival curves for treated and control groups, whereas \\texttt{g\\_formula\\_S\\_learner} uses a single model incorporating both covariates and treatment status to estimate survival time. The latter approach is also available in the RISCA package but is limited to Cox models.\n\n\nHide/Show the code\n# Function to estimate the g-formula Two-learner.\ng_formula_T_learner &lt;- function(data, \n                                X.names.outcome, \n                                tau, \n                                nuisance_survival = \"cox\", \n                                n.folds = NULL) {\n  # Compute min(T_obs,tau)\n  data$T_obs_tau &lt;- ifelse(data$T_obs &gt;= tau, tau, data$T_obs)\n  \n  # Y.grid is the grid of time points where we want to estimate the \n  # survival function.\n  Y.grid &lt;- sort(unique(data$T_obs_tau))\n  \n  S_hat &lt;- estimate_survival_function(data, X.names.outcome, \n                                      Y.grid, \n                                      type_of_model = nuisance_survival,\n                                      T_obs = \"T_obs\", \n                                      status = \"status\", \n                                      n.folds = n.folds)\n  \n  # Compute the area under each survival curve up to max(Y.grid) = tau.\n  E_hat1 &lt;- expected_survival(S_hat$S_hat1, Y.grid)\n  E_hat0 &lt;- expected_survival(S_hat$S_hat0, Y.grid)\n  \n  # Calculate the mean difference.\n  theta_g_formula &lt;- mean(E_hat1 - E_hat0)\n  \n  return(theta_g_formula)\n}\n\n# Function to estimate the g-formula Single-learner.\ng_formula_S_learner &lt;- function(data, \n                                X.names.outcome, \n                                tau, \n                                nuisance_survival = \"cox\", \n                                n.folds = NULL) {\n  # Compute min(T_obs,tau)\n  data$T_obs_tau &lt;- ifelse(data$T_obs &gt;= tau, tau, data$T_obs)\n  \n  # Y.grid is the grid of time points where we want to estimate the \n  # survival function.\n  Y.grid &lt;- sort(unique(data$T_obs_tau))\n  \n  S_hat &lt;- estimate_survival_function(data, X.names.outcome, \n                                      Y.grid, \n                                      type_of_model = nuisance_survival,\n                                      learner = \"S-learner\",\n                                      T_obs = \"T_obs\", \n                                      status = \"status\", \n                                      n.folds = n.folds)\n  \n  # Compute the area under each survival curve until max(Y.grid) = tau.\n  E_hat1 &lt;- expected_survival(S_hat$S_hat1, Y.grid)\n  E_hat0 &lt;- expected_survival(S_hat$S_hat0, Y.grid)\n  \n  # Calculate the mean difference.\n  theta_g_formula &lt;- mean(E_hat1 - E_hat0)\n  \n  return(theta_g_formula)\n}\n\n\nIPTW-IPCW Kaplan-Meier\nThe \\texttt{IPTW\\_IPCW\\_Kaplan\\_meier} function implements the IPTW-IPCW Kaplan Meier estimator from Equation 41. It uses the utilitary functions from the \\texttt{utilitary.R} file \\texttt{estimate\\_propensity\\_score} and \\texttt{estimate\\_survival\\_function} to estimate the nuisance parameters, and the function \\texttt{adjusted.KM} which computes an adjusted Kaplan Meier estimator using the appropriate weight.\n\n\nHide/Show the code\nIPTW_IPCW_Kaplan_meier &lt;- function(data, \n                                   X.names.propensity, \n                                   X.names.censoring, \n                                   tau,\n                                   nuisance_propensity = \"glm\",\n                                   nuisance_censoring = \"cox\",\n                                   n.folds = NULL) {\n  # Censoring time to tau if observed time exceeds tau\n  data$T_obs_tau &lt;- ifelse(data$T_obs &gt;= tau, tau, data$T_obs)\n  \n  # Create censoring status for tau\n  data$censor.status_tau &lt;- 1 - as.numeric((data$T_obs &gt;= tau) | \n                                           (data$T_obs &lt; tau & data$status == 1))\n  \n  # Create status at tau\n  data$status_tau &lt;- as.numeric((data$T_obs &gt;= tau) | \n                                (data$T_obs &lt; tau & data$status == 1))\n  \n  # Grid of unique observed times truncated at tau\n  Y.grid &lt;- sort(unique(data$T_obs_tau))\n\n  # Estimate propensity scores\n  data$e_hat &lt;- estimate_propensity_score(data,\n                                          treatment_covariates = X.names.propensity,\n                                          type_of_model = nuisance_propensity,\n                                          n.folds = n.folds)\n\n  # Estimate survival function for censoring\n  S_C_hat &lt;- estimate_survival_function(data, X.names = X.names.censoring,\n                                        Y.grid = Y.grid, T_obs = \"T_obs_tau\",\n                                        status = \"censor.status_tau\",\n                                        type_of_model = nuisance_censoring,\n                                        n.folds = n.folds)\n\n  # Get estimated survival probabilities for censoring\n  data$S_C &lt;- S_C_hat$S_hat[cbind(1:nrow(data), match(data$T_obs_tau, Y.grid))]\n\n  # Calculate weights\n  data$weights &lt;- data$status_tau / data$S_C * \n                  (data$A * (1 / data$e_hat) + \n                     (1 - data$A) * (1 / (1 - data$e_hat)))\n\n  # Compute adjusted Kaplan-Meier estimator\n  S &lt;- adjusted.KM(times = data$T_obs, \n                   failures = data$status, \n                   variable = data$A, \n                   weights = data$weights)\n\n  # Compute Restricted Mean Survival Time (RMST)\n  RMST &lt;- RMST_1(S_A1 = S[S$variable == 1, ], \n                 S_A0 = S[S$variable == 0, ],\n                 tau = tau)\n\n  # Return RMST and ATE for treated and not treated groups\n  return(list(RMST = RMST$RMST, ATE_treated = RMST$intA1, \n              ATE_not_treated = RMST$intA0))\n}\n\n\nIPTW-BJ estimator\nThe \\texttt{IPTW\\_BJ} implements the IPTW-BJ estimator in Equation 42. It uses the utilitary functions, from the \\texttt{utilitary.R} file, \\texttt{estimate\\_propensity\\_score}, \\texttt{Q\\_t\\_hat} and \\texttt{Q\\_Y} to estimate the nuisance parameters.\n\n\nHide/Show the code\nIPTW_BJ &lt;- function(data, \n                    X.names.propensity,\n                    X.names.outcome, \n                    tau,\n                    nuisance_propensity = \"glm\",\n                    nuisance = \"cox\",\n                    n.folds = NULL) {\n  # Minimum of T_obs and tau\n  data$T_obs_tau &lt;- ifelse(data$T_obs &gt;= tau, tau, data$T_obs)\n  \n  # Grid of unique observed times truncated at tau\n  Y.grid &lt;- sort(unique(data$T_obs_tau))\n  \n  # Indicator for min(T, tau) &lt; C\n  data$status_tau &lt;- as.numeric((data$T_obs &gt;= tau) | \n                                (data$T_obs &lt; tau & data$status == 1))\n  \n\n  # Estimate propensity scores\n  data$e_hat &lt;- estimate_propensity_score(data,\n                                          treatment_covariates = X.names.propensity,\n                                          type_of_model = nuisance_propensity,\n                                          n.folds = n.folds)\n\n\n  # Estimation of Q_s\n  Q_t &lt;- Q_t_hat(data, tau, X.names.outcome, nuisance, n.folds)\n  data$Q_y &lt;-  Q_Y(data,tau,Q_t)\n  \n  # BJ transformation\n  data$Y &lt;-  data$status_tau * data$T_obs_tau + \n                             (1 - data$status_tau) * data$Q_y\n  \n  # IPTW on BJ transformation \n  data$RST &lt;- data$Y * (data$A/data$e_hat-(1-data$A)/(1-data$e_hat))\n  \n  RMST &lt;- mean(data$RST)\n  \n  # Return RMST\n  return(RMST)\n}\n\n\nAIPTW-AIPCW\nThe \\texttt{AIPTW\\_AIPCW} function implements the AIPTW_AIPCW estimator in Equation 43 using the utilitary function from the \\texttt{utilitary.R} file \\texttt{estimate\\_propensity\\_score}, \\texttt{Q\\_t\\_hat}, \\texttt{Q\\_Y}, and \\texttt{estimate\\_survival\\_function} to estimate the nuisance parameters.\n\n\nHide/Show the code\n# DR censoring transformation\nAIPCW &lt;-function(data,\n                 tau,\n                 X.names.censoring = c(\"X1\",\"X2\",\"X3\",\"X4\"),\n                 X.names.outcome = c(\"X1\",\"X2\",\"X3\",\"X4\"),\n                 nuisance_Qt = \"cox\",\n                 nuisance_censoring = \"cox\", \n                 n.folds = NULL, \n                 h_C_hat = NULL,\n                 method_aipw = 1) {\n  \n  # Truncate observed times at tau\n  data$T_obs_tau &lt;- pmin(data$T_obs, tau)\n  \n  # Define status at tau\n  data$status_tau &lt;-  as.numeric((data$T_obs &gt; tau) | \n                                  (data$T_obs &lt;= tau &  data$status == 1 ))  \n\n  data$censor.status_tau &lt;- 1- as.numeric(\n    (data$T_obs &gt; tau) | (data$T_obs &lt;= tau &  data$status == 1 ))\n \n  Y.grid &lt;- sort(unique(data$T_obs_tau))\n  \n  # Estimate survival function for censoring\n  S_C_hat &lt;- estimate_survival_function(data = data,X.names.censoring,\n                                        type_of_model = nuisance_censoring,\n                                        n.folds = n.folds,\n                                        Y.grid = Y.grid,\n                                        T_obs = \"T_obs_tau\",\n                                        status = \"censor.status_tau\")\n  \n  Y.index &lt;- findInterval(data$T_obs_tau, Y.grid)\n  \n  data$S_C_hat_T_obs_tau &lt;- S_C_hat$S_hat[cbind(seq_along(Y.index), Y.index)]\n\n  \n  if (is.null(h_C_hat)) {\n      h_C_hat &lt;- estimate_hazard_function(S_C_hat$S_hat,Y.grid)\n  } \n  \n  # Compute Q.t.hat\n  Q.t.hat &lt;- Q_t_hat(data = data,\n                     X.names = X.names.outcome,\n                     tau = tau,\n                     nuisance = nuisance_Qt,\n                     n.folds = n.folds)\n  \n  # Compute Q.Y.hat\n  data$Q.Y.hat &lt;- Q_Y(data = data, tau, Q.t.hat)\n\n  # Compute first term\n  data$first_term &lt;- (data$T_obs_tau * data$status_tau) / \n    data$S_C_hat_T_obs_tau\n  \n  # Compute second term\n  data$second_term &lt;- (data$Q.Y.hat * (1 - data$status_tau)) / \n    data$S_C_hat_T_obs_tau\n  \n  Y.diff &lt;- diff(c(0, Y.grid))\n  \n  # Compute integrand for the third term\n  integrand &lt;- sweep( ( (h_C_hat) / S_C_hat$S_hat )* (Q.t.hat), 2, Y.diff, \"*\")\n  \n  # Compute third term\n  data$third_term &lt;- integrate(integrand, Y.grid, data$T_obs_tau)\n  \n  # Compute pseudo outcome\n  pseudo_outcome &lt;- data$first_term + data$second_term - data$third_term\n\n  return(pseudo_outcome) \n}\n\n\nAIPTW_AIPCW &lt;- function(data, \n                        tau, \n                        X.names.propensity = c(\"X1\", \"X2\", \"X3\", \"X4\"),\n                        X.names.censoring = c(\"X1\", \"X2\", \"X3\", \"X4\"),\n                        X.names.outcome = c(\"X1\", \"X2\", \"X3\", \"X4\"),\n                        nuisance_propensity = \"glm\",\n                        nuisance_regression = \"cox\",\n                        nuisance_censoring = \"cox\",\n                        nuisance_Qt = \"cox\",\n                        n.folds = NULL) {\n  \n  # Estimate propensity scores\n  data$e_hat &lt;- estimate_propensity_score(\n    data = data, \n    treatment_covariates = X.names.propensity, \n    type_of_model = nuisance_propensity, \n    n.folds = n.folds\n  )\n  \n  # Prepare data for censoring model\n  data$T_obs_tau &lt;- ifelse(data$T_obs &gt;= tau, tau, data$T_obs)\n  \n  data$censor.status_tau &lt;- 1 - as.numeric((data$T_obs &gt;= tau) | \n                                             (data$T_obs &lt; tau & data$status == 1))\n  \n  data$status_tau &lt;- as.numeric((data$T_obs &gt;= tau) | \n                                  (data$T_obs &lt; tau & data$status == 1))\n  \n  # Create unique time grid\n  Y.grid &lt;- sort(unique(data$T_obs_tau))\n  \n  S_hat &lt;- estimate_survival_function(data, X.names.outcome, \n                                      type_of_model = nuisance_regression, \n                                      Y.grid = Y.grid,\n                                      T_obs= \"T_obs\", \n                                      status = \"status\", \n                                      n.folds = n.folds)\n  \n  # Compute area under the survival curve up to tau\n  data$E_hat1 &lt;- expected_survival(S_hat$S_hat1, Y.grid)\n  data$E_hat0 &lt;- expected_survival(S_hat$S_hat0, Y.grid)\n  \n  # Compute IPW-weighted residuals\n  data$IPW_res &lt;- data$E_hat1 * (1 - data$A / data$e_hat) - \n    data$E_hat0 * (1 - (1 - data$A) / (1 - data$e_hat))\n  \n  # Compute AIPCW weights\n  TDR &lt;- AIPCW(\n    data = data, \n    tau = tau,\n    X.names.censoring = X.names.censoring,\n    X.names.outcome = X.names.outcome,\n    nuisance_Qt = nuisance_Qt, \n    nuisance_censoring = nuisance_censoring, \n    n.folds = n.folds\n  )\n  \n  data$TDR &lt;- TDR\n  \n  # Compute AIPCW-weighted residuals\n  data$AIPCW_w &lt;- data$TDR * (data$A / data$e_hat - \n                                (1 - data$A) / (1 - data$e_hat))\n  \n  # Compute regression residuals\n  data$reg &lt;- data$E_hat1 - data$E_hat0\n  data$reg_res &lt;- data$A / data$e_hat * (data$TDR - data$E_hat1) - \n    (1 - data$A) / (1 - data$e_hat) * (data$TDR - data$E_hat0)\n  \n  # Compute estimators\n  # na.rm = TRUE to remove NA for the mean calculation\n  AIPTW_AIPCW_IPW_res &lt;- mean(data$AIPCW_w + data$IPW_res, na.rm = TRUE)\n  AIPTW_AIPCW_reg_res &lt;- mean(data$reg + data$reg_res, na.rm = TRUE)\n  \n  return(list(AIPTW_AIPCW_reg_res = AIPTW_AIPCW_reg_res, \n              AIPTW_AIPCW_IPW_res = AIPTW_AIPCW_IPW_res))\n}"
  },
  {
    "objectID": "Notebook_causal_survival.html#sec-package",
    "href": "Notebook_causal_survival.html#sec-package",
    "title": "\n        \n         Causal survival analysis",
    "section": "4.3 Available packages",
    "text": "4.3 Available packages\nCurrently, there are few sustained implementations available for estimating RMST in the presence of right censoring. Notable exceptions include the packages survRM2 (Hajime et al. 2015), grf (Tibshirani et al. 2017) and RISCA (Foucher, Le Borgne, and Chatton 2019). Those packages are implemented in the \\texttt{utilitary.R} files.\nSurvRM2\nThe difference in RMST with Unadjusted Kaplan-Meier \\hat \\theta_{KM} (Equation 14) can be obtained using the function \\texttt{rmst2} which takes as arguments the observed time-to-event, the status, the arm which corresponds to the treatment and \\tau.\nRISCA\nThe RISCA package provides several methods for estimating \\theta_{\\mathrm{RMST}}. The difference in RMST with Unadjusted Kaplan-Meier \\hat \\theta_{KM} (Equation 14) can be derived using the \\texttt{survfit} function from the the survival package (Therneau 2001) which estimates Kaplan-Meier survival curves for treated and control groups, and then the \\texttt{rmst} function calculates the RMST by integrating these curves, applying the rectangle method (type=“s”), which is well-suited for step functions.\nThe IPTW Kaplan-Meier (Equation 38) can be applied using the \\texttt{ipw.survival} and \\texttt{rmst} functions. The ipw.survival function requires user-specified weights (i.e. propensity scores). To streamline this process, we define the \\texttt{RISCA\\_iptw} function, which combines these steps and utilizes the \\texttt{estimate\\_propensity\\_score} from the \\texttt{utilitary.R} file.\nA single-learner version of the G-formula, as introduced in Section 2.2.1, can be implemented using the \\texttt{gc.survival} function. This function requires as input the conditional survival function which should be estimated beforehand with a Cox model via the \\texttt{coxph} function from the \\texttt{survival} package (Therneau 2001). Specifically, the single-learner approach applies a single Cox model incorporating both covariates and treatment, rather than separate models for each treatment arm. We provide a function \\texttt{RISCA\\_gf} that consolidates these steps.\ngrf\nThe \\texttt{grf} package (Tibshirani et al. 2017) enables estimation of the difference between RMST using the Causal Survival Forest approach (Cui et al. 2023), which extends the non-parametric causal forest framework to survival data. The RMST can be estimated with the \\texttt{causal\\_survival\\_forest} function, requiring covariates X, observed event times, event status, treatment assignment, and the time horizon \\tau as inputs. The \\texttt{average\\_treatment\\_effect} function then evaluates the treatment effect based on predictions from the fitted forest."
  },
  {
    "objectID": "Notebook_causal_survival.html#sec-simulation-RCT",
    "href": "Notebook_causal_survival.html#sec-simulation-RCT",
    "title": "\n        \n         Causal survival analysis",
    "section": "5.1 RCT",
    "text": "5.1 RCT\nData Generating Process\nWe generate RCTs with independent censoring (Scenario 1) and conditionally independent censoring (Scenario 2).    We sample n iid datapoints (X_{i},A_{i},C,T_{i}(0), T_{i}(1))_{i \\in [n]} where T_{i}(0), T_{i}(1) and C follows Cox’s models. More specifically, we set\n\nX \\sim \\mathcal{N}\\left(\\mu,\\Sigma\\right) where \\mu = (1,1,-1,1) and \\Sigma = \\mathrm{Id}_4.\nThe hazard function of T(0) is \\lambda^{(0)}(t|X)= 0.01  \\exp \\left\\{ \\beta_0^\\top X\\right\\} \\quad \\text{where} \\quad \\beta_0 = (0.5,0.5,-0.5,0.5).\n\nThe survival times in the treatment group are given by T(1) = T(0) + 10.\nThe hazard function of the censoring time C is simply taken as \\lambda_C(t|X)=0.03 in Scenario 1, and in Scenario 2 as \\lambda_C(t|X)=0.03 \\cdot \\exp \\left\\{\\beta_C^\\top X\\right\\} \\quad \\text{where} \\quad \\beta_C = (0.7,0.7,-0.25,-0.1).\nThe treatment allocation is independent of X: e(X)=0.5.\n\n\n\n\n\nThe threshold time \\tau is set to 25.\n\n\n\n\nHide/Show the code\n############ RCT \n# RCT1:  Random treatment assignment + independent censoring\n# RCT2:  Random treatment assignment + dependent censoring (conditional on X \n# and A)\nsimulate_data_RCT &lt;- function(n, mu = c(1, 1, -1, 1), \n                              sigma = diag(4), \n                              colnames_cov = c(\"X1\", \"X2\", \"X3\", \"X4\"),\n                              tau, \n                              coefT0 = 0.01,\n                              parsS = c(0.5, 0.5, -0.5, 0.5), \n                              coefC = 0.03,\n                              parsC = c(0.7, 0.3, -0.25, -0.1), \n                              parsC_A = c(-0.2), \n                              scenario = \"RCT2\",\n                              mis_specification=\"none\") {\n  \n  # Generate X from a multivariate normal distribution\n  X &lt;- MASS::mvrnorm(n, mu, sigma)\n  X &lt;- as.data.frame(X)\n  colnames(X) &lt;- colnames_cov\n  \n  # Treatment variable selection: all X\n  X_treatment &lt;- as.matrix(X)\n  \n  # Propensity score: constant for random assignment\n  e &lt;- rep(0.5, n)\n  \n  # Random treatment assignment\n  A &lt;- sapply(e, FUN = function(p) rbinom(1, 1, p))\n  \n  # Outcome variable selection: all X\n  X_outcome &lt;- as.matrix(X)\n  \n  # Simulate the outcome using the cumulative hazard inversion method\n  epsilon &lt;- runif(n, min = 1e-8, max = 1)\n  T0 &lt;- -log(epsilon) / (coefT0 * exp(X_outcome %*% parsS))\n  \n  if (scenario == \"RCT1\") {\n    # Simulate independent censoring time\n    epsilon &lt;- runif(n, min = 1e-8, max = 1)\n    C &lt;- -log(epsilon) / coefC\n  }\n  else if (scenario == \"RCT2\") {\n    # Simulate dependent censoring time\n    X_censoring &lt;- as.matrix(cbind(X,A))\n    parsC &lt;- c(parsC,parsC_A)\n    \n    epsilon &lt;- runif(n, min = 1e-8, max = 1)\n    C &lt;- -log(epsilon) / (coefC * exp(rowSums(X_censoring %*% diag(parsC))))\n  }\n  # T(1) = T(0) + 10\n  T1 &lt;- T0 + 10\n  \n  # True survival time\n  T_true &lt;- A * T1 + (1 - A) * T0\n  \n  # Observed time\n  T_obs &lt;- pmin(T_true, C)\n  \n  # Status indicator\n  status &lt;- as.numeric(T_true &lt;= C)\n  censor.status &lt;- as.numeric(T_true &gt; C)\n  \n  # Restricted survival time\n  T_obs_tau &lt;- pmin(T_obs, tau)\n  status_tau &lt;- as.numeric((T_obs &gt; tau) | (T_obs &lt;= tau & status == 1))\n  \n  # Combine all data into a single data frame\n  data_target_population &lt;- data.frame(X, tau, A, T0, T1, C, T_obs, T_obs_tau, \n                                       status, censor.status, status_tau, e)\n  \n  return(data_target_population)\n}\n\n\nThe descriptive statistics of the two datasets are displayed in Annex (Section 9.1). The graph of the difference in RMST as a function of \\tau for the two scenarii are displayed below; \\theta_{\\mathrm{RMST}} is the same in both setting.\n\n\nHide/Show the code\n# Function to calculate ground truth for RCT and Observational data\nground_truth &lt;- function(tau, \n                         data) {\n  # Compute RMST with the true T1\n  data$T1_tau &lt;- ifelse(data$T1 &gt;= tau, tau, data$T1)\n  \n  # Compute RMST with the true T0\n  data$T0_tau &lt;- ifelse(data$T0 &gt;= tau, tau, data$T0)\n  \n  # Compute the difference in RMST if everyone had the treatment \n  # and if everyone had the control\n  truth &lt;- mean(data$T1_tau) - mean(data$T0_tau)\n  \n  return(truth)\n}\n\n\n\n\n\n\n\n\n\n\n\n[1] \"The ground truth for RCT scenario 1 and 2 at time 25 is 7.1\"\n\n\nEstimation of the RMST\nFor each Scenario, we estimate the difference in RMST using the methods summarized in Section 4.1. The methods used to estimate the nuisance components are indicated in brackets: either logistic regression or random forests for propensity scores and either cox models or survival random forests for survival and censoring models. A naive estimator where censored observations are simply removed and the survival time is averaged for treated and controls is also provided for a naive baseline.\nFigure 8 shows the distribution of the difference in RMST for 100 simulations in Scenario 1 and different sample sizes: 500, 1000, 2000, 4000. The true value of \\theta_{\\mathrm{RMST}} is indicated by red dotted line.\n\n\nHide/Show the code\n# Function to launch the previous implemented functions in a \n# specified scenario, sample size.\nall_estimates &lt;- function(data, sample.size, tau, \n                           X.names.propensity,\n                           X.names.censoring,\n                           X.names.outcome,\n                           nuisance_propensity = \"glm\", \n                           nuisance_censoring = \"cox\", \n                           nuisance_survival = \"cox\", \n                           n.folds = NULL,\n                           estimator = \"all\") {\n  \n  # List of available estimators\n  available_estimators &lt;- c(\n    \"Naive\", \"KM\", \"IPTW KM\", \"IPCW KM\", \"BJ\", \n    \"IPTW-IPCW KM\", \"IPTW-BJ\", \"G_formula (T-learners)\", \n    \"G_formula (S-learner)\", \"AIPTW-AIPCW\", \"SurvRM2 - KM\", \n    \"grf - Causal Survival Forest\", \"RISCA - IPTW KM\", \n    \"RISCA - G_formula (S-learner)\"\n  )\n  \n  # If estimator is \"all\", we select all the estimators in \n  # available_estimators\n  if (\"all\" %in% estimator) {\n    estimator &lt;- available_estimators\n  }\n  \n  # Filter the selected estimators\n  estimator &lt;- intersect(estimator, available_estimators)\n  \n  # Store the results in a data frame\n  results &lt;- data.frame(\n    \"sample.size\" = numeric(),\n    \"estimate\" = numeric(),\n    \"estimator\" = character(),\n    \"nuisance\" = character()\n  )\n  \n  # Function to extract variable names from I() for squared terms and interaction terms\n  extract_vars &lt;- function(names) {\n    # Extract names from squared terms\n    extracted_squared &lt;- gsub(\"I\\\\((.*)\\\\^2\\\\)\", \"\\\\1\", names)  # Replace \"I(X^2)\" with \"X\"\n    # Extract names from interaction terms (e.g., \"X1:X2\" becomes \"X1\" and \"X2\")\n    result_vector &lt;- unique(unlist(strsplit(extracted_squared, \":\")))\n    return(unique(result_vector))\n  }\n  # Combine all vectors\n  all_names &lt;- c(X.names.propensity, X.names.outcome, X.names.censoring)\n  # Apply the extraction function\n  X.names &lt;- extract_vars(all_names)\n  \n  # Each estimator is computed if selected\n  # Naive estimator\n  if (\"Naive\" %in% estimator) {\n    ATE_naive &lt;- Naive(data, tau)\n    results &lt;- rbind(results, data.frame(\n      \"sample.size\" = sample.size, \"estimate\" = ATE_naive, \n      \"estimator\" = \"Naive\", \"nuisance\" = \"\"\n    ))\n  }\n  # RMST estimate with undajusted KM\n  if (\"KM\" %in% estimator) {\n    ATE_km_rct &lt;- RMST_1(data, tau = tau)\n    results &lt;- rbind(results, data.frame(\n      \"sample.size\" = sample.size, \"estimate\" = ATE_km_rct$RMST, \n      \"estimator\" = \"KM\", \"nuisance\" = \"\"\n    ))\n  }\n  # RMST estimate with IPTW KM\n  if (\"IPTW KM\" %in% estimator) {\n    for (propensity_method in nuisance_propensity) {\n      ATE_km_adj &lt;- IPTW_Kaplan_meier(data, tau = tau, \n                                      X.names.propensity = X.names.propensity, \n                                      nuisance_propensity = propensity_method, \n                                      n.folds = n.folds)\n      if (propensity_method == \"probability forest\"){propensity_name = \"Forest\"}\n      else{propensity_name = \"Log. Reg.\"}\n      est_name &lt;- paste(\"IPTW KM (\", propensity_name, \")\", sep = \"\")\n      results &lt;- rbind(results, data.frame(\n        \"sample.size\" = sample.size, \"estimate\" = ATE_km_adj$RMST, \n        \"estimator\" = est_name, \"nuisance\" = propensity_method\n      ))\n    }\n  }\n  \n  # RMST estimate with IPCW KM\n  if (\"IPCW KM\" %in% estimator) {\n    for (censoring_method in nuisance_censoring) {\n      ATE_IPCW &lt;- IPCW_Kaplan_meier(data, X.names.censoring = X.names.censoring, \n                                    tau = tau, \n                                    nuisance_censoring = censoring_method, \n                                    n.folds = n.folds)\n      if (censoring_method == \"survival forest\"){censoring_name = \"Forest\"}\n      else{censoring_name = \"Cox\"}\n      est_name &lt;- paste(\"IPCW KM (\", censoring_name, \")\", sep = \"\")\n      results &lt;- rbind(results, data.frame(\n        \"sample.size\" = sample.size, \"estimate\" = ATE_IPCW$RMST, \n        \"estimator\" = est_name , \"nuisance\" = censoring_method\n      ))\n    }\n  }\n  # RMST estimate with BJ pseudo observations\n  if (\"BJ\" %in% estimator) {\n    for (survival_method in nuisance_survival) {\n      ATE_bj &lt;- BJ(data, tau = tau, \n                   X.names.outcome = X.names.outcome,\n                   nuisance = survival_method, \n                   n.folds = n.folds)\n      if (survival_method == \"survival forest\"){survival_name = \"Forest\"}\n      else{survival_name = \"Cox\"}\n      est_name &lt;- paste(\"BJ (\", survival_name, \")\", sep = \"\")\n      results &lt;- rbind(results, data.frame(\n        \"sample.size\" = sample.size, \"estimate\" = ATE_bj$RMST, \n        \"estimator\" = est_name, \"nuisance\" = survival_method\n      ))\n    }\n  }\n  \n  # RMST estimate with g-formula two-learners\n  if (\"G_formula (T-learners)\" %in% estimator) {\n    for (survival_method in nuisance_survival) {\n      ATE_g_formula_t &lt;- g_formula_T_learner(data, tau = tau, \n                                             X.names.outcome = X.names.outcome, \n                                             nuisance_survival = survival_method, \n                                             n.folds = n.folds)\n      if (survival_method == \"survival forest\"){survival_name = \"Forest\"}\n      else{survival_name = \"Cox\"}\n      est_name &lt;- paste(\"G-formula (\", survival_name, \"/ T-learners)\", sep = \"\")\n      results &lt;- rbind(results, data.frame(\n        \"sample.size\" = sample.size, \"estimate\" = ATE_g_formula_t, \n        \"estimator\" = est_name, \n        \"nuisance\" = survival_method\n      ))\n    }\n  }\n  \n  # RMST estimate with g-formula single learner\n  if (\"G_formula (S-learner)\" %in% estimator) {\n    for (survival_method in nuisance_survival) {\n      ATE_g_formula_s &lt;- g_formula_S_learner(data, tau = tau, \n                                             X.names.outcome = X.names.outcome, \n                                             nuisance_survival = survival_method, \n                                             n.folds = n.folds)\n      if (survival_method == \"survival forest\"){survival_name = \"Forest\"}\n      else{survival_name = \"Cox\"}\n      est_name &lt;- paste(\"G-formula (\", survival_name, \"/ S-learner)\", sep = \"\")\n      results &lt;- rbind(results, data.frame(\n        \"sample.size\" = sample.size, \"estimate\" = ATE_g_formula_s, \n        \"estimator\" = est_name, \n        \"nuisance\" = survival_method\n      ))\n    }\n  }\n  \n  \n  # RMST estimate with IPTW with pseudo observations (BJ transformation)\n  if (\"IPTW-BJ\" %in% estimator) {\n    for (survival_method in nuisance_survival) {\n      for (propensity_method in nuisance_propensity) {\n        ATE_IPTW_bj &lt;- IPTW_BJ(data, tau = tau, \n                               X.names.propensity = X.names.propensity, \n                               X.names.outcome = X.names.outcome, \n                               nuisance_propensity = propensity_method, \n                               nuisance = survival_method, \n                               n.folds = n.folds)\n        if (survival_method == \"survival forest\"){survival_name = \"Forest\"}\n        else{survival_name = \"Cox\"}\n        if (propensity_method == \"probability forest\"){propensity_name = \"Forest\"}\n        else{propensity_name = \"Log. Reg.\"}\n        if (propensity_name  == survival_name){\n          est_name &lt;- paste(\"IPTW-BJ (\", survival_name, \")\", sep = \"\")\n        }\n        else{\n          est_name &lt;- paste(\"IPTW-BJ (\", survival_name,\" & \", propensity_name , \")\", \n                            sep = \"\")}\n        \n        \n        results &lt;- rbind(results, data.frame(\n          \"sample.size\" = sample.size, \"estimate\" = ATE_IPTW_bj, \n          \"estimator\" = est_name, \n          \"nuisance\" = paste(survival_method, propensity_method, sep = \", \")\n        ))\n      }\n    }\n  }\n  \n  # RMST estimate with IPTW-IPCW KM\n  if (\"IPTW-IPCW KM\" %in% estimator) {\n    for (censoring_method in nuisance_censoring) {\n      for (propensity_method in nuisance_propensity) {\n        ATE_iptw_ipcw_km &lt;- IPTW_IPCW_Kaplan_meier(data, tau = tau, \n                                                   X.names.propensity = X.names.propensity, \n                                                   X.names.censoring = X.names.censoring, \n                                                   nuisance_propensity = propensity_method, \n                                                   nuisance_censoring = censoring_method, \n                                                   n.folds = n.folds)\n        if (censoring_method == \"survival forest\"){censoring_name = \"Forest\"}\n        else{censoring_name = \"Cox\"}\n        if (propensity_method == \"probability forest\"){propensity_name = \"Forest\"}\n        else{propensity_name = \"Log. Reg.\"}\n        if (propensity_name  == censoring_name){\n          est_name &lt;- paste(\"IPTW-IPCW KM (\", censoring_name , \")\", \n                            sep = \"\")\n        }\n        else{\n          est_name &lt;- paste(\"IPTW-IPCW KM (\", censoring_name,\" & \", propensity_name , \")\", \n                            sep = \"\")}\n        results &lt;- rbind(results, data.frame(\n          \"sample.size\" = sample.size, \"estimate\" = ATE_iptw_ipcw_km$RMST, \n          \"estimator\" = est_name, \n          \"nuisance\" = paste(censoring_method, propensity_method, sep = \", \")\n        ))\n      }\n    }\n  }\n  \n  \n  # RMST estimate with AIPTW with pseudo observations (AIPCW transformation)\n  if (\"AIPTW-AIPCW\" %in% estimator) {\n    for (survival_method in nuisance_survival) {\n      for (propensity_method in nuisance_propensity) {\n        for (censoring_method in nuisance_censoring) {\n          ATE_aiptw_aipcw &lt;- AIPTW_AIPCW(data, tau = tau, \n                                         X.names.propensity = X.names.propensity, \n                                         X.names.censoring = X.names.censoring, \n                                         X.names.outcome = X.names.outcome,\n                                         nuisance_propensity = propensity_method, \n                                         nuisance_censoring = censoring_method, \n                                         nuisance_Qt = survival_method, \n                                         n.folds = n.folds)\n          if (survival_method == \"survival forest\"){survival_name = \"Forest\"}\n          else{survival_name = \"Cox\"}\n          if (propensity_method == \"probability forest\"){\n            propensity_name = \"Forest\"}\n          else{propensity_name = \"Log. Reg.\"}\n          if (censoring_method == \"survival forest\"){\n            censoring_name = \"Forest\"}\n          else{censoring_name = \"Cox\"}\n          if (censoring_name == propensity_name & censoring_name == survival_name){\n            est_name &lt;- paste(\"AIPTW-AIPCW (\", survival_name, \")\", sep = \"\")\n          }\n          else{\n            est_name &lt;- paste(\"AIPTW-AIPCW (\", survival_name,\" & \", \n                              censoring_name ,\" & \", propensity_name , \")\", sep = \"\")}\n          results &lt;- rbind(results, data.frame(\n            \"sample.size\" = sample.size, \n            \"estimate\" = ATE_aiptw_aipcw$AIPTW_AIPCW_IPW_res, \n            \"estimator\" = est_name, \n            \"nuisance\" = paste(survival_method, \n                               censoring_method, \n                               propensity_method , sep = \", \")\n          ))\n        }\n      }\n    }\n  }\n  \n  # Unadjusted estimate using package from SurvRM2\n  if (\"SurvRM2 - KM\" %in% estimator) {\n    ATE_pack &lt;- tryCatch({\n      theta_rmst_survrm2(data, tau = tau)\n    }, error = function(e) {\n      message(\"Error in ATE_pack: \", e$message)\n      return(NA) \n    })\n    results &lt;- rbind(results, data.frame(\n      \"sample.size\" = sample.size, \"estimate\" = ATE_pack, \n      \"estimator\" = \"SurvRM2 - KM\", \"nuisance\" = \"\"\n    ))\n  }\n  # Estimate using survival random forest from grf\n  # CSF can have a misspecification only on all nuisance parameters\n  if (\"grf - Causal Survival Forest\" %in% estimator) {\n    ATE_RF &lt;- tryCatch({\n      # If there is no misspecification, X.names has to be defined as the \n      # union of all the covariates which influence nuisance models\n      CSRF(data, X.names, tau = tau)\n    }, error = function(e) {\n      message(\"Error in ATE_RF: \", e$message)\n      return(NA) \n    })\n    results &lt;- rbind(results, data.frame(\n      \"sample.size\" = sample.size, \"estimate\" = ATE_RF, \n      \"estimator\" = \"grf - Causal Survival Forest\", \n      \"nuisance\" = \"\"\n    ))\n  }\n  \n  if (\"RISCA - IPTW KM\" %in% estimator) {\n    for (propensity_method in nuisance_propensity) {\n      # IPTW estimate from RISCA\n      ATE_RISCA_iptw &lt;- tryCatch({\n        RISCA_iptw(data, X.names.propensity, propensity_method, tau = tau, \n                   n.folds=n.folds)\n      }, error = function(e) {\n        message(\"Error in ATE_RISCA_iptw: \", e$message)\n        return(NA) \n      })\n      if (propensity_method == \"probability forest\"){propensity_name = \"Forest\"}\n      else{propensity_name = \"Log. Reg.\"}\n      est_name &lt;- paste(\"RISCA - IPTW KM (\", propensity_name, \")\", sep = \"\")\n      results &lt;- rbind(results, data.frame(\n        \"sample.size\" = sample.size, \"estimate\" = ATE_RISCA_iptw, \n        \"estimator\" = est_name, \n        \"nuisance\" = propensity_method\n      ))\n    }\n  }\n  # Only support Cox object\n  if (\"RISCA - G_formula (S-learner)\" %in% estimator) {\n    # G-formula estimate from RISCA\n    ATE_RISCA_gf &lt;- tryCatch({\n      RISCA_gf(data, X.names.outcome, tau = tau)\n    }, error = function(e) {\n      message(\"Error in ATE_RISCA_gf: \", e$message)\n      return(NA) \n    })\n    results &lt;- rbind(results, data.frame(\n      \"sample.size\" = sample.size, \"estimate\" = ATE_RISCA_gf, \n      \"estimator\" = \"RISCA - G_formula (S-learner)\", \n      \"nuisance\" = \"Cox\"\n    ))\n  }\n  return(results)\n}\n\n\n# Function to compute estimators for multiple simulations and sample sizes\ncompute_estimator &lt;- function(n_sim, tau, scenario = \"RCT1\", \n                              X.names.propensity, \n                              X.names.outcome,\n                              X.names.censoring,\n                              nuisance_propensity = \"glm\", \n                              nuisance_censoring = \"cox\", \n                              nuisance_survival = \"cox\", \n                              n.folds_propensity = NULL,\n                              n.folds_censoring = NULL, \n                              n.folds_survival = NULL, coefC = NULL, \n                              parsC = NULL,\n                              parsC_A = NULL,\n                              estimator = \"all\",\n                              sample_sizes = c(500, 1000, 2000, 4000, 8000)) {\n  \n  pb_n &lt;- txtProgressBar(min = 0, max = length(sample_sizes), \n                         style = 3, initial = 0, char = \"#\")\n  on.exit(close(pb_n))\n  \n  results &lt;- data.frame(\n    \"sample.size\" = numeric(),\n    \"estimate\" = numeric(),\n    \"estimator\" = character(),\n    \"nuisance\" = character()\n  )\n  \n  # Loop through each sample size\n  for (idx_n in seq_along(sample_sizes)) {\n    n &lt;- sample_sizes[idx_n]\n    \n    # Progress bar for simulations\n    pb &lt;- txtProgressBar(min = 0, max = n_sim, style = 3, initial = 0, char = \"#\")\n    on.exit(close(pb))\n    \n    # Loop through each simulation\n    for (i in 1:n_sim) {\n      setTxtProgressBar(pb, i)\n      \n      # Simulate data based on the scenario\n      if (scenario == \"RCT1\") {\n        data &lt;- simulate_data_RCT(n, tau = tau, \n                                  scenario = \"RCT1\")\n      } else if (scenario == \"RCT2\") {\n        data &lt;- simulate_data_RCT(n, tau = tau, \n                                  scenario = \"RCT2\", \n                                  coefC = coefC, \n                                  parsC = parsC,\n                                  parsC_A = parsC_A)\n      } else if (scenario == \"Obs1\") {\n        data &lt;- simulate_data_obs(n, tau = tau, \n                                  scenario = \"Obs1\")\n      } else if (scenario == \"Obs2\") {\n        data &lt;- simulate_data_obs(n, tau = tau, \n                                  scenario = \"Obs2\", \n                                  coefC = coefC, \n                                  parsC = parsC)\n      } else if (scenario == \"Complex\") {\n        data &lt;- simulate_data_complex(n, \n                                      tau = tau,\n                                      parsC = parsC)\n      } else if (scenario == \"Mis\") {\n        data &lt;- simulate_data_mis(n, tau = tau)\n      }\n      \n      \n      # Compute all estimates for the simulated data\n      all &lt;- all_estimates(data, n, tau = tau, \n                           X.names.propensity, \n                           X.names.outcome,\n                           X.names.censoring,\n                           nuisance_propensity, \n                           nuisance_censoring,\n                           nuisance_survival, \n                           n.folds_propensity = n.folds_propensity, \n                           n.folds_censoring = n.folds_censoring, \n                           n.folds_survival = n.folds_survival,\n                           estimator)\n      results &lt;- rbind(all, results)\n    }\n    \n    close(pb)\n    setTxtProgressBar(pb_n, idx_n)\n  }\n  \n  return(results)\n}\n\n\n\n\nHide/Show the code\n# Number of simulations and tau value\nn_sim &lt;- 100\ntau &lt;- 25\n\n# RCT1 simulation\nsimulation_rct1 &lt;- compute_estimator(\n      n_sim, tau = tau, scenario = \"RCT1\", \n      X.names.propensity = c(\"X1\", \"X2\", \"X3\", \"X4\"), \n      X.names.outcome = c(\"X1\", \"X2\", \"X3\", \"X4\"),\n      X.names.censoring = c(\"X1\", \"X2\", \"X3\", \"X4\"),\n      nuisance_propensity = c(\"glm\", \"probability forest\"), \n      nuisance_censoring = c(\"cox\", \"survival forest\"), \n      nuisance_survival = c(\"cox\", \"survival forest\"), \n      n.folds_propensity = 5,\n      n.folds_censoring = 5,\n      n.folds_survival = 5,\n      coefC = 0.03\n)\nsave(simulation_rct1, file = \"simulation_rct1.RData\")\n\n# RCT2 simulation with specific coefficients and parameters\nsimulation_rct2 &lt;- compute_estimator(\n  n_sim, tau = tau, scenario = \"RCT2\", \n  X.names.propensity = c(\"X1\", \"X2\", \"X3\", \"X4\"), \n  X.names.outcome = c(\"X1\", \"X2\", \"X3\", \"X4\"),\n  X.names.censoring = c(\"X1\", \"X2\", \"X3\", \"X4\"),\n  nuisance_propensity = c(\"glm\", \"probability forest\"), \n  nuisance_censoring = c(\"cox\", \"survival forest\"), \n  nuisance_survival = c(\"cox\", \"survival forest\"), \n  n.folds_propensity = 5,\n  n.folds_censoring = 5,\n  n.folds_survival = 5,\n  coefC = 0.03, \n  parsC = c(0.7, 0.3, -0.25, -0.1), \n  parsC_A = 0\n)\nsave(simulation_rct2, file = \"simulation_rct2.RData\")\n\n\n\n\nHide/Show the code\nload(\"simulations/results magellan 5/simulation_rct1.RData\")\nload(\"simulations/results magellan 5/simulation_rct2.RData\")\n\n\n\n\nHide/Show the code\n# Update the theme to center the plot title\ntheme_update(plot.title = element_text(hjust = 0.5))\n\n# Define the desired order of the estimators\n\ndesired_order &lt;- c(\n  \"Naive\",\n  \"KM\",\n  \"SurvRM2 - KM\",\n  \"IPTW KM (Log. Reg.)\",\n  \"RISCA - IPTW KM (Log. Reg.)\",\n  \"IPCW KM (Cox)\",\n  \"BJ (Cox)\",\n  \"IPTW-BJ (Cox & Log. Reg.)\",\n  \"IPTW-IPCW KM (Cox & Log. Reg.)\",\n  \"G-formula (Cox/ T-learners)\",\n  \"G-formula (Cox/ S-learner)\",\n  \"RISCA - G_formula (S-learner)\",\n  \"AIPTW-AIPCW (Cox & Cox & Log. Reg.)\",\n  \"grf - Causal Survival Forest\",\n  \"IPTW KM (Forest)\",\n  \"RISCA - IPTW KM (Forest)\",\n  \"IPCW KM (Forest)\",\n  \"BJ (Forest)\",\n  \"IPTW-BJ (Forest)\",\n  \"IPTW-IPCW KM (Forest)\",\n  \"G-formula (Forest/ T-learners)\",\n  \"G-formula (Forest/ S-learner)\",\n  \"AIPTW-AIPCW (Forest)\")\n\n# Convert sample size to a factor with levels sorted in decreasing order\nsimulation_rct1$sample.size &lt;- factor(\n  simulation_rct1$sample.size, \n  levels = sort(unique(simulation_rct1$sample.size), decreasing = FALSE)\n)\n\n# Convert estimator column to a factor with the specified order\nsimulation_rct1$estimator &lt;- factor(simulation_rct1$estimator, \n                                    levels = desired_order)\n\n# Create the plot for RCT + independent censoring\nsimulation_graph_rct1 &lt;- simulation_rct1 %&gt;%\n  ggplot(aes(\n    x = estimator, y = estimate,  \n    fill = factor(sample.size, levels = rev(levels(sample.size)))\n  )) +\n  scale_fill_brewer(palette = \"Accent\") +\n  geom_boxplot(alpha = 0.9, show.legend = TRUE, position = \"dodge\") +\n  xlab(\"\") +  # Change x-axis label\n  ylab(\"ATE\") +  # Change y-axis label\n  stat_boxplot(geom = \"errorbar\") +\n  geom_hline(\n    yintercept = truth_tau1, linetype = \"dashed\", color = \"red\", \n    alpha = 0.8, size = 0.8\n  ) +\ntheme(\n    legend.title = element_blank(), legend.position = \"bottom\",\n    legend.box = \"vertical\", legend.text = element_text(size = 18),\n    axis.text.x = element_text(angle = 35, vjust = 1, hjust = 1),  \n    # Adjust text angle for better visibility\n    axis.text = element_text(size = 15, face = \"bold\"),\n    axis.title.x = element_text(size = 16, face = \"bold\"),\n    plot.margin = margin(t = 10, r = 10, b = 50, l = 10)  # Add margin\n  ) +    \n  coord_cartesian(ylim = c(0, 15))\n\n\n\n\nHide/Show the code\nsimulation_graph_rct1 \n\n\n\n\n\n\n\n\nFigure 8: Results of the ATE for the simulation of a RCT with independent censoring.\n\n\n\n\n\nIn this setting, and in accordance with the theory, the simplest estimator (unadjusted KM) performs just as well as the others, and presents an extremely small bias (as derived in Section 2.1).\nThe naive estimator is biased, as expected, and the bias in both the G-formula (RISCA) and the manual G-formula S-learner arises because the treatment effect is additive T(1) = T(0) + 10 and violates the assumption that T would follow a Cox model in the variables (X,A). However, T|A=a is a Cox-model for a \\in \\{0,1\\}, which explain the remarkable performance of G-formula (Cox/T-learners) and some of the other models based on a Cox estimation of S.\nOther estimators (IPTW KM (Reg.Log), IPCW KM (Cox), IPTW-IPCW KM (Cox & Log.Reg), IPTW-BJ (Cox & Log.Reg), AIPTW-AIPCW (Cox & Cox & Log.Reg)) involve unnecessary nuisance parameter estimates, such as propensity scores or censoring models. Despite this, their performance remains relatively stable in terms of variability, and there are roughly no differences between using (semi-)parametric or non-parametric estimation methods for nuisance parameters except for IPCW KM and IPTW-IPCW KM where there is a slight bias when using forest-based methods.\n\n\nHide/Show the code\nsimulation_graph_rct2\n\n\n\n\n\n\n\n\nFigure 9: Estimation results of the ATE for the simulation of a RCT with dependent censoring.\n\n\n\n\n\nFigure 9 shows the results for the RCT simulation with conditionally independent censoring (Scenario 2). In this setting, the Naive estimator remains biased. Similarly, both the unadjusted Kaplan-Meier (KM) and its SurvRM2 equivalent, as well as the treatment-adjusted IPTW KM and its RISCA equivalent, are biased due to their failure to account for dependent censoring. As in Scenario 1, G-formula (Cox/ S-learner) and its RISCA equivalent also remain biased. The IPCW KM (Cox) is slightly biased up to 4,000 observations and quite variable due to extreme censoring probabilities. IPTW-IPCW KM (Cox & Log.Reg.) is not biased but shows high variance. In contrast, the Buckley-James estimator BJ (Cox) is unbiased even with as few as 500 observations. The BJ estimator also demonstrates smaller variance than IPCW methods. G-formula (Cox/ T-learners) and AIPCW-AIPTW (Cox & Cox & Log.Reg.) estimators seem to perform well, even in small samples. The forest versions of these estimators seem more biased, except Causal Survival Forest and the AIPTW-AIPCW (Forest). Notably, all estimators exhibit higher variability compared to Scenario 1."
  },
  {
    "objectID": "Notebook_causal_survival.html#sec-simulation-Obs",
    "href": "Notebook_causal_survival.html#sec-simulation-Obs",
    "title": "\n        \n         Causal survival analysis",
    "section": "5.2 Observational data",
    "text": "5.2 Observational data\nData Generating Process\nAs for Scenarii 1 and 2, we carry out two simulations of an observational study with both independent and conditional independent censoring. The only difference lies in the simulation of the propensity score, which is no longer constant. For the simulation, an iid n-sample (X_{i},A_{i},C,T_{i}(0), T_{i}(1))_{i \\in [n]} is generated as in Section 5.1, except for the treatment allocation process that is given by:\n\n\\operatorname{logit}(e(X))= \\beta_A^\\top X \\quad \\text{where} \\quad \\beta_A = (-1,-1,-2.5,-1),\n\nwhere we recall that \\operatorname{logit}(p) = \\log(p/(1-p)). The descriptive statistics for the two observational data with independent (\\texttt{Obs1}) and conditionally independent censoring (\\texttt{Obs2}) are displayed in Appendix (Section 9.2). Note that we did not modify the survival distribution, the target difference in RMST is thus the same.\n\n\nHide/Show the code\n# Obs1:  Treatment assignment dependent on X + independent censoring\n# Obs2:  Treatment assignment dependent on X + dependent censoring (conditional \n# on X)\n\n# Function to simulate observational data for two scenarios: Obs1 and Obs2\nsimulate_data_obs &lt;- function(n, \n                              mu = c(1, 1, -1, 1), \n                              sigma = diag(4), \n                              colnames_cov = c(\"X1\", \"X2\", \"X3\", \"X4\"),\n                              tau,\n                              coefT0 = 0.01, \n                              parsS = c(0.5, 0.5, -0.5, 0.5),\n                              parsA = c(-1, -1, -2.5, -1), \n                              parsC_A = c(0), \n                              coefC = 0.03,\n                              parsC = c(0.7, 0.3, -0.25, -0.1), \n                              scenario = \"Obs2\") {\n  \n  # Generate covariates X from a multivariate normal distribution\n  X &lt;- mvrnorm(n, mu, sigma)\n  X &lt;- as.data.frame(X)\n  colnames(X) &lt;- colnames_cov\n  \n  # Propensity score model based on X\n  e &lt;- rowSums(as.matrix(X) %*% diag(parsA))\n  e &lt;- plogis(e)  # Transform to probability scale\n  \n  # Treatment assignment based on the propensity score\n  A &lt;- sapply(e, FUN = function(p) rbinom(n = 1, size = 1, prob = p))\n  \n  # Outcome model based on X\n  X_outcome &lt;- as.matrix(X)\n  epsilon &lt;- runif(n, min = 0.00000001, max = 1)\n  T0 &lt;- -log(epsilon) / (coefT0 * exp(X_outcome %*% parsS))\n  \n  # Define treatment effect (shift in survival time due to treatment)\n  T1 &lt;- T0 + 10\n  \n  if (scenario == \"Obs1\") {\n    # Scenario 1: Independent censoring\n    C &lt;- -log(runif(n, min = 0.00000001, max = 1)) / coefC\n    \n  } else if (scenario == \"Obs2\") {\n    # Scenario 2: Dependent censoring based on X\n    X_censoring &lt;- as.matrix(cbind(X,A))\n    parsC &lt;- c(parsC,parsC_A)\n    \n    C &lt;- -log(runif(n, min = 0.00000001, max = 1)) / \n      (coefC * exp(rowSums(X_censoring %*% diag(parsC))))\n    \n  } else {\n    stop(\"Invalid scenario. Choose 'Obs1' or 'Obs2'.\")\n  }\n  \n  # Determine the true survival time based on treatment\n  T_true &lt;- A * T1 + (1 - A) * T0\n  \n  # Observed time is the minimum of the true survival time and censoring time\n  T_obs &lt;- pmin(T_true, C)\n  \n  # Status indicator: 1 if the event (death) occurred, 0 if censored\n  status &lt;- as.numeric(T_true &lt;= C)\n  \n  # Restricted survival time (censored at tau)\n  T_obs_tau &lt;- pmin(T_obs, tau)\n  status_tau &lt;- as.numeric((T_obs &gt; tau) | (T_obs &lt;= tau & status == 1))\n  \n  # Compile the simulated data into a data frame\n  DATA_target_population &lt;- data.frame(X, tau, A, T0, T1, C, T_obs, T_obs_tau, \n                                       status, status_tau, e)\n  \n  return(DATA_target_population)\n}\n\n\n\n\nHide/Show the code\n# Simulation for scenario Obs1\ndata_Obs1 &lt;- simulate_data_obs(n = 100000, tau = 25, scenario = \"Obs1\")\n\n#plot_ground_truth(data_Obs1, \n#                  vec_tau, \n#                  tau, \n#                  c(0, 10),\n#                  \"True difference in RMST for Obs #scenario 1\")\n\ntruth_tau3 &lt;-  ground_truth(data_Obs1, tau = 25)\nprint(paste0(\"The ground truth for Obs scenario 1 at time 25 is \", round(truth_tau3, 1)))\n\n\n[1] \"The ground truth for Obs scenario 1 at time 25 is 7.1\"\n\n\nHide/Show the code\n# Simulation for scenario Obs2 with specific coefficients and parameters\ndata_Obs2 &lt;- simulate_data_obs(\n  n = 100000, tau = tau, scenario = \"Obs2\", \n  coefC = 0.03, parsC = c(0.7, 0.3, -0.25, -0.1))\n\n#plot_ground_truth(data_Obs2, \n#                  vec_tau, \n#                  tau, \n#                  c(0, 10),\n#                  \"True difference in RMST for Obs #scenario 2\")\n\ntruth_tau4 &lt;- ground_truth(data_Obs2, tau = 25)\nprint(paste0(\"The ground truth for Obs scenario 2 at #time 25 is \", round(truth_tau4, 1)))\n\n\n[1] \"The ground truth for Obs scenario 2 at #time 25 is 7.1\"\n\n\nEstimation of the RMST\n\n\nHide/Show the code\n# Obs1 simulation\nsimulation_obs1 &lt;- compute_estimator(\n  n_sim, tau = tau, scenario = \"Obs1\", \n  X.names.propensity = c(\"X1\", \"X2\", \"X3\", \"X4\"), \n  X.names.outcome = c(\"X1\", \"X2\", \"X3\", \"X4\"),\n  X.names.censoring = c(\"X1\", \"X2\", \"X3\", \"X4\"),\n  nuisance_propensity = c(\"glm\", \"probability forest\"), \n  nuisance_censoring = c(\"cox\", \"survival forest\"), \n  nuisance_survival = c(\"cox\", \"survival forest\"), \n  n.folds_propensity = 5,\n  n.folds_censoring = 5,\n  n.folds_survival = 5,\n  coefC = 0.03\n)\nsave(simulation_obs1, file = \"simulation_obs1.RData\")\n\n\n# Obs2 simulation with specific coefficients and parameters\nsimulation_obs2 &lt;- compute_estimator(\n  n_sim, tau = tau, scenario = \"Obs2\", \n  X.names.propensity = c(\"X1\", \"X2\", \"X3\", \"X4\"), \n  X.names.outcome = c(\"X1\", \"X2\", \"X3\", \"X4\"),\n  X.names.censoring = c(\"X1\", \"X2\", \"X3\", \"X4\"),\n  nuisance_propensity = c(\"glm\", \"probability forest\"), \n  nuisance_censoring = c(\"cox\", \"survival forest\"), \n  nuisance_survival = c(\"cox\", \"survival forest\"), \n  n.folds_propensity = 5,\n  n.folds_censoring = 5,\n  n.folds_survival = 5,\n  coefC = 0.03, \n  parsC = c(0.7, 0.3, -0.25, -0.1)\n)\nsave(simulation_obs2, file = \"simulation_obs2.RData\")\n\n\n\n\nHide/Show the code\nload(\"simulations/results magellan 5/simulation_obs1.RData\")\nload(\"simulations/results magellan 5/simulation_obs2.RData\")\n\n\nFigure 10 below shows the distribution of the estimators of \\theta_{\\mathrm{RMST}} for the observational study with independent censoring.\n\n\nHide/Show the code\nsimulation_graph_obs1\n\n\n\n\n\n\n\n\nFigure 10: Estimation results of the ATE for the simulation of an observational study with independent censoring.\n\n\n\n\n\nIn the simulation of an observational study with independent censoring, confounding bias is introduced, setting it apart from RCT simulations. As expected, estimators that fail to adjust for this bias, such as unadjusted Kaplan-Meier (KM), IPCW KM (Cox), and their equivalents, are biased. However, estimators like IPTW KM (Log.Reg.), IPTW-IPCW KM (Cox & Log. Reg.) are unbiased, even if the latter estimate unnecessary nuisance components. Results with IPTW BJ (Cox & Log.Reg) are extremely variable.\nThe top-performing estimators in this scenario are G-formula (Cox/ T-learners) and AIPCW-AIPTW (Cox & Cox & Log.Reg.), which are unbiased even with 500 observations. The former has the lowest variance. All estimators that use forests to estimate nuisance parameters are biased across sample sizes from 500 to 8000. Although Causal Survival Forest and AIPW-AIPCW (Forest) are expected to eventually converge, they remain extremely demanding in terms of sample size. This setting thus highlights that one should either have an a priori knowledge on the specification of the models or large sample size.\nFigure 11 below shows the distribution of the \\theta_{\\mathrm{RMST}} estimates for the observational study with conditionally independent censoring. The red dashed line represents the true \\theta_{\\mathrm{RMST}} for \\tau=25.\n\n\nHide/Show the code\nsimulation_graph_obs2\n\n\n\n\n\n\n\n\nFigure 11: Estimation results of the ATE for the simulation of an observational study with dependent censoring.\n\n\n\n\n\nIn the simulation of an observational study with conditionally independent censoring, estimators that do not account for both censoring and confounding bias, such as KM, IPCW KM, IPTW KM, and their package equivalents, are biased. The top-performing estimators in this scenario are G-formula (Cox/ T-learners) and AIPCW-AIPTW (Cox & Cox & Log.Reg.), which are unbiased even with 500 observations. The former has the lowest variance as expected, see Section 2.2.1. Surprisingly, the G-formula (Cox/S-learner) and its equivalent from the RISCA package perform quite competitively, showing only a slight bias despite the violation of the proportional hazards assumption. All estimators that use forests to estimate nuisance parameters are biased across sample sizes from 500 to 8000. Although Causal Survival Forest and AIPTW-AIPCW (Forest) are expected to eventually converge, they remain extremely demanding in terms of sample size."
  },
  {
    "objectID": "Notebook_causal_survival.html#mispecification-of-nuisance-components",
    "href": "Notebook_causal_survival.html#mispecification-of-nuisance-components",
    "title": "\n        \n         Causal survival analysis",
    "section": "5.3 Mispecification of nuisance components",
    "text": "5.3 Mispecification of nuisance components\nData Generating Process\nWe generate an observational study with covariate interactions and conditionally independent censoring. The objective is to assess the impact of misspecifying nuisance components; specifically, we will use models that omit interactions to estimate these components. This approach enables us to evaluate the robustness properties of various estimators. In addition, in this setting forest based methods are expected to behave better.\nWe generate n samples (X_{i},A_{i},C,T_{i}(0), T_{i}(1)) as follows:\n\nX \\sim \\mathcal{N}\\left(\\mu, \\Sigma\\right) and \\mu = (0.5,0.5,0.7,0.5), \\Sigma = \\mathrm{Id}_4.\nThe hazard function of T(0) is given by \n\\begin{aligned}\n\\lambda^{(0)}(t|X) = \\exp\\{\\beta_0^\\top Y\\} \\quad \\text{where} \\quad \\beta_0 &= (0.2,0.3,0.1,0.1,1,0,0,0,0,1), \\\\\n\\text{and} \\quad Y &= (X_1^2,X_2^2,X_3^2,X_4^2,X_1 X_2,X_1X_3,X_1X_4,X_2 X_3,X_2X_4, X_3 X_4).\n\\end{aligned}\n\nThe distribution of T(1) is the one of T(0) but shifted: T(1) = T(0)+1.\nThe hazard function of C is given by \n\\begin{aligned}\n\\lambda_C(t|X) = \\exp\\{\\beta_C^\\top Y\\} \\quad \\text{where} \\quad \\beta_C &= (0.05,0.05,-0.1,0.1,0,1,0,-1,0,0).\n\\end{aligned}\n\nThe propensity score is \n\\begin{aligned}\n\\mathrm{logit}(e(x)) = \\beta_A^\\top Y \\quad \\text{where} \\quad \\beta_A= (0.05,-0.1,0.5,-0.1,1,0,1,0,0,0).\n\\end{aligned}\n When the model is well-specified, the full vector (X,Y) is given as an input of the nuisance parameter models. When it is not, only X and the first half of Y corresponding to (X_1^2,X_2^2,X_3^2,X_4^2) is given as an input.\n\n\n\nHide/Show the code\n# DGP for misspecification \nsimulate_data_mis &lt;- function(n, \n                              mu = c(0.5, 0.5, 0.7, 0.5),\n                              sigma =  matrix(c(1, 0, 0, 0, \n                                                0, 1, 0, 0, \n                                                0, 0, 1, 0,\n                                                0, 0, 0, 1), \n                                              nrow = 4, byrow = TRUE),\n                              colnames_cov = c(\"X1\", \"X2\", \"X3\", \"X4\"),\n                              parsA =  c(0.05, -0.1, 0.5, -0.1),\n                              tau){\n  \n  # Generate X from a multivariate normal distribution\n  X &lt;- MASS::mvrnorm(n, mu, sigma)\n  X &lt;- as.data.frame(X)\n  colnames(X) &lt;- colnames_cov\n  \n  # Treatment variable selection: all X\n  X_treatment &lt;- as.matrix(X)\n  \n  # Propensity score model based on X\n  e &lt;- parsA[1]*X_treatment[, \"X1\"]^2 + parsA[2]*X_treatment[, \"X2\"]^2 + \n    parsA[3]*X_treatment[, \"X3\"]^2 + parsA[4]*X_treatment[, \"X4\"]^2-\n    X_treatment[, \"X1\"]*X_treatment[, \"X2\"] +\n    X_treatment[, \"X1\"]*X_treatment[, \"X4\"]\n  \n  # Logistic regression\n  e &lt;- plogis(e)\n  \n  # Treatment assignment based on the propensity score\n  A &lt;- sapply(e, FUN = function(p) rbinom(n = 1, size = 1, prob = p))\n  \n  # Outcome variable selection: all X\n  X_outcome &lt;- as.matrix(X)\n  \n  lambda &lt;- exp(0.2*X[,1]^2 + 0.3*X[,2]^2 + 0.1*X[,3]^2 + 0.1*X[,4]^2 + \n    X[,1] * X[,2] + X[,3] * X[,4])\n  # Simulate the outcome using the cumulative hazard inversion method\n  epsilon &lt;- runif(n, min = 1e-8, max = 1)\n  T0 &lt;- -log(epsilon) / lambda\n  \n  # Simulate independent censoring time\n  censoring_lambda &lt;- exp(0.05*X[,1]^2 + 0.05*X[,2]^2-0.1*X[,3]^2 + 0.1*X[,4]^2 + \n    X[,3] * X[,1] - X[,2]*X[,4])\n  epsilon &lt;- runif(n, min = 1e-8, max = 1)\n  C &lt;- -log(epsilon) / censoring_lambda\n  \n  \n  # T(1) = T(0) + 1\n  T1 &lt;- T0 + 1\n  \n  # True survival time\n  T_true &lt;- A * T1 + (1 - A) * T0\n  \n  # Observed time\n  T_obs &lt;- pmin(T_true, C)\n  \n  # Status indicator\n  status &lt;- as.numeric(T_true &lt;= C)\n  censor.status &lt;- as.numeric(T_true &gt; C)\n  \n  # Restricted survival time\n  T_obs_tau &lt;- pmin(T_obs, tau)\n  status_tau &lt;- as.numeric((T_obs &gt; tau) | (T_obs &lt;= tau & status == 1))\n  # Compile the simulated data into a data frame\n  DATA_target_population &lt;- data.frame(X, tau, A, T0, T1, C, T_obs, T_obs_tau, \n                                       status, status_tau, censor.status, e)\n  \n  return(DATA_target_population)\n}\n\n\n\n\nHide/Show the code\n# Function to estimate RMST for each misspecification context\ncompute_estimator_mispec &lt;- function(n_sim, tau, \n                                     X.names.propensity_mis, \n                                     X.names.propensity, \n                                     X.names.outcome,\n                                     X.names.outcome_mis,\n                                     X.names.censoring,\n                                     X.names.censoring_mis,\n                                     nuisance_propensity = \"glm\", \n                                     nuisance_censoring = \"cox\", \n                                     nuisance_survival = \"cox\", \n                                     n.folds_propensity = NULL,\n                                     n.folds_censoring = NULL, \n                                     n.folds_survival = NULL,\n                                     estimator = \"all\",\n                                     sample_sizes = c(8000)) {\n  \n  pb_n &lt;- txtProgressBar(min = 0, max = length(sample_sizes) * n_sim, \n                         style = 3, initial = 0, char = \"#\")\n  on.exit(close(pb_n))\n  \n  # Initialize data frame for each misspecification\n  simulation_mis &lt;- data.frame()\n  simulation_mistreat &lt;- data.frame()\n  simulation_misout &lt;- data.frame()\n  simulation_miscens &lt;- data.frame()\n  simulation_mistreat_out &lt;- data.frame()\n  simulation_miscens_out &lt;- data.frame()\n  simulation_mistreat_cens &lt;- data.frame()\n  simulation_misall &lt;- data.frame()\n\n  # Function to compute estimators for multiple simulations and sample sizes\n  for (n in sample_sizes) {\n    for (i in 1:n_sim) {\n      setTxtProgressBar(pb_n, (which(sample_sizes == n) - 1) * n_sim + i)\n      data &lt;- simulate_data_mis(n, tau = tau)\n\n      # Compute all estimates for the simulated data\n      res_all_mis &lt;- all_estimates(data, n, tau = tau, \n                                   X.names.propensity = X.names.propensity, \n                                   X.names.outcome = X.names.outcome,\n                                   X.names.censoring = X.names.censoring,\n                                   nuisance_propensity = nuisance_propensity, \n                                   nuisance_censoring = nuisance_censoring,\n                                   nuisance_survival = nuisance_survival, \n                                   n.folds_propensity = n.folds_propensity, \n                                   n.folds_censoring = n.folds_censoring, \n                                   n.folds_survival = n.folds_survival,\n                                   estimator)\n      \n      res_all_mistreat &lt;- all_estimates(data, n, tau = tau, \n                                        X.names.propensity = X.names.propensity_mis, \n                                        X.names.outcome = X.names.outcome,\n                                        X.names.censoring = X.names.censoring,\n                                        nuisance_propensity = nuisance_propensity,\n                                        nuisance_censoring = nuisance_censoring,\n                                        nuisance_survival = nuisance_survival,  \n                                        n.folds_propensity = n.folds_propensity, \n                                        n.folds_censoring = n.folds_censoring, \n                                        n.folds_survival = n.folds_survival,\n                                        estimator)\n      \n      res_all_misout &lt;- all_estimates(data, n, tau = tau, \n                                      X.names.propensity = X.names.propensity, \n                                      X.names.outcome = X.names.outcome_mis,\n                                      X.names.censoring = X.names.censoring,\n                                      nuisance_propensity = nuisance_propensity,\n                                      nuisance_censoring = nuisance_censoring,\n                                      nuisance_survival = nuisance_survival,  \n                                      n.folds_propensity = n.folds_propensity, \n                                      n.folds_censoring = n.folds_censoring, \n                                      n.folds_survival = n.folds_survival,\n                                      estimator)\n      \n      res_all_miscens &lt;- all_estimates(data, n, tau = tau, \n                                       X.names.propensity = X.names.propensity, \n                                       X.names.outcome = X.names.outcome,\n                                       X.names.censoring = X.names.censoring_mis,\n                                       nuisance_propensity = nuisance_propensity,\n                                       nuisance_censoring = nuisance_censoring,\n                                       nuisance_survival = nuisance_survival,  \n                                       n.folds_propensity = n.folds_propensity, \n                                       n.folds_censoring = n.folds_censoring, \n                                       n.folds_survival = n.folds_survival,\n                                       estimator)\n      \n      res_all_mistreat_out &lt;- all_estimates(data, n, tau = tau, \n                                            X.names.propensity = X.names.propensity_mis, \n                                            X.names.outcome = X.names.outcome_mis,\n                                            X.names.censoring = X.names.censoring,\n                                            nuisance_propensity = nuisance_propensity,\n                                            nuisance_censoring = nuisance_censoring,\n                                            nuisance_survival = nuisance_survival,\n                                            n.folds_propensity = n.folds_propensity, \n                                            n.folds_censoring = n.folds_censoring, \n                                            n.folds_survival = n.folds_survival,\n                                            estimator)\n      \n      res_all_miscens_out &lt;- all_estimates(data, n, tau = tau, \n                                           X.names.propensity = X.names.propensity, \n                                           X.names.outcome = X.names.outcome_mis,\n                                           X.names.censoring = X.names.censoring_mis,\n                                           nuisance_propensity = nuisance_propensity,\n                                           nuisance_censoring = nuisance_censoring,\n                                           nuisance_survival = nuisance_survival,\n                                           n.folds_propensity = n.folds_propensity, \n                                           n.folds_censoring = n.folds_censoring, \n                                           n.folds_survival = n.folds_survival,\n                                           estimator)\n      \n      res_all_mistreat_cens &lt;- all_estimates(data, n, tau = tau, \n                                             X.names.propensity = X.names.propensity_mis, \n                                             X.names.outcome = X.names.outcome,\n                                             X.names.censoring = X.names.censoring_mis,\n                                             nuisance_propensity = nuisance_propensity,\n                                             nuisance_censoring = nuisance_censoring,\n                                             nuisance_survival = nuisance_survival,\n                                             n.folds_propensity = n.folds_propensity, \n                                             n.folds_censoring = n.folds_censoring, \n                                             n.folds_survival = n.folds_survival,\n                                             estimator)\n      \n      res_all_misall &lt;- all_estimates(data, n, tau = tau, \n                                      X.names.propensity = X.names.propensity_mis, \n                                      X.names.outcome = X.names.outcome_mis,\n                                      X.names.censoring = X.names.censoring_mis,\n                                      nuisance_propensity = nuisance_propensity,\n                                      nuisance_censoring = nuisance_censoring,\n                                      nuisance_survival = nuisance_survival,\n                                      n.folds_propensity = n.folds_propensity, \n                                      n.folds_censoring = n.folds_censoring, \n                                      n.folds_survival = n.folds_survival,\n                                      estimator)\n      \n      # Store the results\n      simulation_mis &lt;- rbind(simulation_mis, res_all_mis)\n      simulation_mistreat &lt;- rbind(simulation_mistreat, res_all_mistreat)\n      simulation_misout &lt;- rbind(simulation_misout, res_all_misout)\n      simulation_miscens &lt;- rbind(simulation_miscens, res_all_miscens)\n      simulation_mistreat_out &lt;- rbind(simulation_mistreat_out, res_all_mistreat_out)\n      simulation_miscens_out &lt;- rbind(simulation_miscens_out, res_all_miscens_out)\n      simulation_mistreat_cens &lt;- rbind(simulation_mistreat_cens, res_all_mistreat_cens)\n      simulation_misall &lt;- rbind(simulation_misall, res_all_misall)\n    }\n  }\n  \n  # Fusion of dataframe\n  return(list(\n    simulation_mis = simulation_mis,\n    simulation_mistreat = simulation_mistreat,\n    simulation_misout = simulation_misout,\n    simulation_miscens = simulation_miscens,\n    simulation_mistreat_out = simulation_mistreat_out,\n    simulation_miscens_out = simulation_miscens_out,\n    simulation_mistreat_cens = simulation_mistreat_cens,\n    simulation_misall = simulation_misall\n  ))\n}\n\n\nThe descriptive statistics are given in Appendix (Section 9.3).\n\n\nHide/Show the code\n# Mis scenario \ntau_mis &lt;- 0.5\nvec_tau_complex &lt;- seq(0, 10, by = 0.05)\ndata_mis &lt;- simulate_data_mis(n = 150000, tau = tau_mis)\n\n#plot_ground_truth(data_mis,\n#                  vec_tau_complex, \n#                  tau_mis, \n#                  c(0, 1), \n#                  \"True difference in RMST for Mis scenario\")\n\ntruth_complex_mis &lt;- ground_truth(data_mis, tau = tau_mis)\n\nprint(paste0(\"The ground truth for mis scenario at time 0.45 is \", round(truth_complex_mis,2)))\n\n\n[1] \"The ground truth for mis scenario at time 0.45 is 0.26\"\n\n\nEstimation of the RMST\nFirst, we estimate \\theta_{\\mathrm{RMST}} without any model misspecification to confirm the consistency of the estimators under correctly specified nuisance models. More specifically, it means that for parametric propensity score models, semi-parametric censoring and survival models, we use models including interactions and squared assuming knowledge on the data generating process.\nNext, we introduce misspecification individually for the treatment model, censoring model, and outcome model (Figure 13), i.e., we use models without interaction to estimate parametric and semi-parametric nuisance components while the data are generated with interactions.\nWe further examine combined misspecifications for pairs of models: treatment and censoring, treatment and outcome, and outcome and censoring. Finally, we assess the impact of misspecifying all nuisance models simultaneously (Figure 14).\n\n\nHide/Show the code\nn_sim &lt;- 100\ntau &lt;- 0.5\nsimulation_mis &lt;- compute_estimator(\n  n_sim, tau = tau, scenario = \"Mis\", \n  X.names.propensity = c(\"I(X1^2)\", \"I(X2^2)\",\"I(X3^2)\", \"I(X4^2)\", \n                         \"X1*X2\",\"X1*X4\"),\n  X.names.outcome = c(\"I(X1^2)\", \"I(X2^2)\",\"I(X3^2)\", \"I(X4^2)\", \n                      \"X1:X2\", \"X3:X4\"),\n  X.names.censoring = c(\"I(X1^2)\", \"I(X2^2)\",\"I(X3^2)\", \"I(X4^2)\", \n                        \"X1:X3\", \"X2:X4\"),\n  nuisance_propensity = c(\"glm\"), \n  nuisance_censoring = c(\"cox\"), \n  nuisance_survival = c(\"cox\"), \n  n.folds_propensity = NULL,\n  n.folds_censoring = NULL,\n  n.folds_survival = NULL,\n  sample_sizes = c(500, 1000, 2000, 4000, 8000),\n  estimator = c(\"Naive\", \"KM\", \"IPTW KM\", \"IPCW KM\", \"BJ\", \n                \"IPTW-IPCW KM\", \"IPTW-BJ\", \"G_formula (T-learners)\", \n                \"G_formula (S-learner)\", \"AIPTW-AIPCW\")\n)\nsave(simulation_mis, file=\"simulation_mis.RData\") \n\nsimulation_mis_c &lt;- compute_estimator(\n  n_sim, tau = tau, scenario = \"Mis\", \n  X.names.propensity = c(\"X1\",\"X2\",\"X3\",\"X4\"),\n  X.names.outcome = c(\"X1\",\"X2\",\"X3\",\"X4\"),\n  X.names.censoring = c(\"X1\",\"X2\",\"X3\",\"X4\"),\n  nuisance_propensity = c(\"probability forest\"), \n  nuisance_censoring = c(\"survival forest\"), \n  nuisance_survival = c(\"survival forest\"), \n  n.folds_propensity = 5,\n  n.folds_censoring = 5,\n  n.folds_survival = 5,\n  sample_sizes = c(500, 1000, 2000, 4000, 8000),\n  estimator = c(\"IPTW KM\", \"IPCW KM\", \"BJ\", \n                \"IPTW-IPCW KM\", \"IPTW-BJ\", \"G_formula (T-learners)\", \n                \"G_formula (S-learner)\", \"AIPTW-AIPCW\",\n                \"grf - Causal Survival Forest\")\n)\n\nsave(simulation_mis_c, file=\"simulation_mis_c.RData\") \n\nsimulation_mis_c_16000 &lt;- compute_estimator(\n  n_sim, tau = tau, scenario = \"Mis\", \n  X.names.propensity = c(\"X1\",\"X2\",\"X3\",\"X4\"),\n  X.names.outcome = c(\"X1\",\"X2\",\"X3\",\"X4\"),\n  X.names.censoring = c(\"X1\",\"X2\",\"X3\",\"X4\"),\n  nuisance_propensity = c(\"probability forest\"), \n  nuisance_censoring = c(\"survival forest\"), \n  nuisance_survival = c(\"survival forest\"), \n  n.folds_propensity = 5,\n  n.folds_censoring = 5,\n  n.folds_survival = 5,\n  sample_sizes = 16000,\n  estimator = c(\"IPTW KM\", \"G_formula (T-learners)\")\n)\nsave(simulation_mis_c_16000, file=\"simulations/results magellan 4/simulation_mis_c_16000.RData\")  \n\n\n\n\nHide/Show the code\nload(\"simulations/results magellan 5/simulation_mis.RData\")\nload(\"simulations/results magellan 5/simulation_mis_c.RData\")\nload(\"simulations/results magellan 4/simulation_mis_c_16000.RData\")\n\n\n\n\nHide/Show the code\nsimulation_graph_mis\n\n\n\n\n\n\n\n\nFigure 12: Estimation results of the ATE for the simulation of an observational study with dependent censoring and non linear relationships.\n\n\n\n\n\n\n\nHide/Show the code\nn_sim &lt;- 100\ntau &lt;- 0.5\nmis &lt;- compute_estimator_mispec(n_sim, tau = tau, \n                                   X.names.propensity = c(\"I(X1^2)\", \"I(X2^2)\",\n                                                          \"I(X3^2)\", \"I(X4^2)\", \n                                                          \"X1*X2\",\"X1*X4\"),\n                                   X.names.outcome = c(\"I(X1^2)\", \"I(X2^2)\",\n                                                       \"I(X3^2)\", \"I(X4^2)\", \n                                                       \"X1:X2\", \"X3:X4\"),\n                                   X.names.censoring = c(\"I(X1^2)\", \"I(X2^2)\",\n                                                         \"I(X3^2)\", \"I(X4^2)\", \n                                                         \"X1:X3\", \"X2:X4\"),\n                                   X.names.propensity_mis = c(\"I(X1^2)\",\"I(X2^2)\",\n                                                              \"I(X3^2)\", \"I(X4^2)\"),\n                                   X.names.outcome_mis = c(\"I(X1^2)\", \"I(X2^2)\",\n                                                           \"I(X3^2)\", \"I(X4^2)\"),\n                                   X.names.censoring_mis = c(\"I(X1^2)\", \"I(X2^2)\",\n                                                             \"I(X3^2)\", \"I(X4^2)\"),\n                                   nuisance_propensity = c(\"glm\"), \n                                   nuisance_censoring = c(\"cox\"), \n                                   nuisance_survival = c(\"cox\"),\n                                   estimator = estimators,\n                                   sample_size = 8000)\n\n\n# Initialize a list to decompose the results\nmerged_results &lt;- list()\n\n# All the defined sceanario\nscenarios &lt;- c(\"simulation_mis\", \"simulation_mistreat\", \"simulation_misout\",\n               \"simulation_miscens\", \"simulation_mistreat_out\", \n               \"simulation_miscens_out\", \"simulation_mistreat_cens\", \n               \"simulation_misall\")\n\n# Loop through all scenarios\nfor (s in scenarios) {\n  # Initialize an empty dataframe\n  scenario_results &lt;- data.frame()\n  \n  # Loop through all sample sizes\n  for (i in seq_along(sample_sizes)) {\n    # Append the results for the given scenario and sample size \n    scenario_results &lt;- rbind(scenario_results, results[[i]][[s]])\n  }\n  \n  # Add the results for the given scenario to the results list \n  merged_results[[s]] &lt;- scenario_results\n  \n  # Save the final results for the given scenario in an .RData file\n  assign(paste0(s), scenario_results)\n  save(list = paste0(s), file = sprintf(\"%s.RData\", s))\n}\n\n\n\n\nHide/Show the code\ngrid.arrange(simulation_graph_mis2, simulation_graph_mis_miscens, simulation_graph_mis_misout, simulation_graph_mis_mistreat, ncol = 2, nrow = 2)\n\n\n\n\n\n\n\n\nFigure 13: Estimation results of the ATE for an observational study with dependent censoring in case of a single misspecification.\n\n\n\n\n\nWhen there is no misspecification in Figure 12, as expected, IPTW-BJ (Cox & Log.Reg), G-formula (Cox/ T-learners) and AIPTW-AIPCW (Cox & Cox & Reg.Log) are unbiased. IPTW-IPCW KM (Cox & Log.Reg) exhibits a bias but seems to converge at larger sample size. Regarding forest-based methods, IPTW-BJ (Forest), AIPTW-AIPCW (Forest) and Causal Survival Forest estimate accurately the difference in RMST. Surprisingly, G-formula (Forest/ T-learners), G-formula (Forest/ S-learner) and IPTW-IPCW KM (Forest) exhibit small bias but are expected to eventually converge at large sample size.\nFigure 13 shows that AIPTW-AIPCW (Cox & Cox & Reg.Log) is convergent when there is one nuisance misspecification. In contrary, the other estimators are biased when one of its nuisance parameter is misspecified.\n\n\nHide/Show the code\nload(\"simulations/results magellan 5/simulation_mistreat_out.RData\")\nload(\"simulations/results magellan 5/simulation_miscens_out.RData\")\nload(\"simulations/results magellan 5/simulation_mistreat_cens.RData\")\nload(\"simulations/results magellan 5/simulation_misall.RData\")\n\n\n\n\nHide/Show the code\nn_sim &lt;- 100\ntau &lt;- 0.5\nsimulation_mis_mistreat_cens &lt;- compute_estimator(\n  n_sim, tau = tau, scenario = \"Mis\", \n  X.names.propensity = c(\"X2\"), \n  X.names.outcome = c(\"I(X1^2)\", \"I(X2^2)\", \"X1:X2\"),\n  X.names.censoring = c(\"X1\",\"X2\"),\n  nuisance_propensity = \"glm\",\n  nuisance_censoring = \"cox\",\n  nuisance_survival = \"cox\",\n  coefC = NULL, \n  parsC = NULL,\n  n.folds = NULL,\n  mis_specification = \"none\",\n  sample_size = 4000\n)\n\nsave(simulation_mis_mistreat_cens,file=\"simulations/results magellan 2/simulation_mis_mistreat_cens.RData\")\n\n\n\n\nHide/Show the code\ngrid.arrange(simulation_graph_mis_mistreat_out, simulation_graph_mis_miscens_out, simulation_graph_mis_mistreat_cens, simulation_graph_mis_all, ncol = 2, nrow = 2)\n\n\n\n\n\n\n\n\nFigure 14: Estimation results of the ATE for an observational study with dependent censoring in case of a two or more misspecifications.\n\n\n\n\n\nFigure 14 shows that, as expected, when all nuisance models are misspecified, all estimators exhibit bias. AIPTW-AIPCW (Cox & Cox & Reg.Log) seems to converge in case where either the outcome and censoring models, or the treatment and censoring models are misspecificed which deviates from initial expectations. It was anticipated that AIPTW-AIPCW would converge solely when both the censoring and treatment models were misspecified."
  },
  {
    "objectID": "Notebook_causal_survival.html#sec-proof21",
    "href": "Notebook_causal_survival.html#sec-proof21",
    "title": "\n        \n         Causal survival analysis",
    "section": "8.1 Proofs of Section 2.1",
    "text": "8.1 Proofs of Section 2.1\n\nProof. (Proposition 1). Consistency is a trivial consequence of the law of large number and the identity 11. To show that \\widehat S_{\\mathrm{KM}} is unbiased, let us introduce \\mathcal{F}_k be the filtration generated by the set of variables \n\\{A_i, \\mathbb{I}\\{\\widetilde T_i = t_j\\}, \\mathbb{I}\\{\\widetilde T_i = t_j, \\Delta_i=1\\}~|~j \\in [k], i \\in [n]\\}.\n which corresponds to the known information up to time t_k, so that D_k(a) is \\mathcal{F}_k-measurable but N_k(a) is \\mathcal{F}_{k-1}-measurable. One can write that, for k\\geqslant 2 \\begin{align*}\n\\mathbb{E}[\\mathbb{I}\\{\\widetilde T_i = t_k, \\Delta_i = 1, A_i=a\\}~|~\\mathcal{F}_{k-1}] &= \\mathbb{E}[\\mathbb{I}\\{\\widetilde T_i = t_k, \\Delta_i = 1, A_i=a\\}~|~\\mathbb{I}\\{\\widetilde T_i \\geqslant t_k\\},A_i]  \\\\\n&= \\mathbb{I}\\{A_i=a\\} \\mathbb{E}[\\mathbb{I}\\{T_i = t_k, C_i \\geqslant t_k\\}~|~\\mathbb{I}\\{T_i \\geqslant t_k, C_i \\geqslant t_k\\}, A_i] \\\\\n&=  \\mathbb{I}\\{A_i=a\\} \\mathbb{I}\\{C_i \\geqslant t_k\\} \\mathbb{E}[\\mathbb{I}\\{T_i = t_k\\} ~|~ \\mathbb{I}\\{T_i \\geqslant t_k\\}, A_i] \\\\\n&= \\mathbb{I}\\{\\widetilde T_i \\geqslant t_k, A_i=a\\}\\left(1- \\frac{S^{(a)}(t_{k})}{S^{(a)}(t_{k-1})}\\right),\n\\end{align*} where we used that T_i(a) is idependant from A_i by Assumption 5. We then easily derive from this that \n\\mathbb{E}\\left[\\left(1-\\frac{D_k(a)}{N_k(a)} \\right) \\mathbb{I}\\{N_k(a) &gt;0\\}\\middle |\\mathcal{F}_{k-1}\\right] = \\frac{S^{(a)}(t_k)}{S^{(a)}(t_{k-1})} \\mathbb{I}\\{N_k(a) &gt;0\\},\n and then that \n\\mathbb{E}\\left[\\widehat S_{\\mathrm{KM}}(t_k|A=a)\\middle |\\mathcal{F}_{k-1}\\right] =  \\frac{S^{(a)}(t_k)}{S^{(a)}(t_{k-1})} \\widehat S_{\\mathrm{KM}}(t_{k-1}|A=a) + O(\\mathbb{I}\\{N_k(a) =0\\}),\n\nBy induction, we easily find that \n\\mathbb{E}[\\widehat S_{\\mathrm{KM}}(t|A=a)] = \\prod_{t_j \\leqslant t} \\frac{S^{(a)}(t_j)}{S^{(a)}(t_{j-1})} + O\\left(\\sum_{t_j \\leqslant t}\\mathbb{P}(N_j(a) =0)\\right)= S^{(a)}(t) + O(\\mathbb{P}(N_k(a) =0))\n where t_k is the greatest time such that t_k \\leqslant t.\n\n\nProof. (Proposition 2). The asymptotic normality is a mere consequence of the joint asymptotic normality of (N_k(a),D_k(a))_{t_k \\leqslant t} with an application of the \\delta-method. To access the asymptotic variance, notice that, using a similar reasonning as in the previous proof: \\begin{align*}\n\\mathbb{E}[(1-D_k(a)/N_k(a))^2|\\mathcal{F}_{k-1}] &= \\mathbb{E}[1-D_k(a)/N_k(a)|\\mathcal{F}_{k-1}(a)]^2+\\frac{1}{N_k(a)^2}\\mathrm{Var}(D_k(a)|\\mathcal{F}_{k-1}) \\\\\n&= s_k^2(a)+ \\frac{s_k(a)(1-s_k(a))}{N_k(a)}\\mathbb{I}\\{N_k(a) &gt; 0\\} + O(\\mathbb{I}\\{N_k(a) = 0\\}).\n\\end{align*} Now we know that N_k(a) = n r_k(a) + \\sqrt{n} O_{\\mathbb{P}}(1), with the O_{\\mathbb{P}}(1) having uniformly bounded moments. So that we deduce that \n\\begin{aligned}\n\\mathbb{E}[(1-D_k(a)/N_k(a))^2|\\mathcal{F}_{k-1}] &= s_k^2(a)+ \\frac{s_k(a)(1-s_k(a))}{n r_k(a)} +  \\frac{1}{n^{3/2}} O_{\\mathbb{P}}(1),\n\\end{aligned}\n where O_{\\mathbb{P}}(1) has again bounded moments. Using this identity, we find that \n\\begin{aligned}\nn \\mathrm{Var}\\widehat S_{\\mathrm{KM}} (t|A=a) &= n \\left(\\mathbb{E}S_{\\mathrm{KM}} (t|A=a)^2 -  S^{(a)} (t)^2 \\right) \\\\\n&= n S^{(a)}(t)^2 \\left(\\mathbb{E}\\left[\\prod_{t_k \\leqslant t}  \\left(1+\\frac1n\\frac{1-s_k(a)}{s_k(a) r_k(a)} +   \\frac{1}{n^{3/2}} O_{\\mathbb{P}}(1) \\right)\\right]-1\\right).\n\\end{aligned}\n Expending the product and using that the O_{\\mathbb{P}}(1)’s have bounded moments, we finally deduce that \n\\begin{aligned}\n\\mathbb{E}\\left[\\prod_{t_k \\leqslant t}  \\left(1+\\frac1n\\frac{1-s_k(a)}{s_k(a) r_k(a)} +   \\frac{1}{n^{3/2}} O_{\\mathbb{P}}(1) \\right)\\right]-1 =   \\frac1n \\sum_{t_k \\leqslant t}\\frac{1-s_k(a)}{s_k(a) r_k(a)} +   \\frac{1}{n^{3/2}} O(1),\n\\end{aligned}\n\n\nn\\mathrm{Var}\\widehat S_{\\mathrm{KM}} (t|A=a) = V_{\\mathrm{KM}}(t|A=a) + O(n^{-1/2}),  \n which is what we wanted to show."
  },
  {
    "objectID": "Notebook_causal_survival.html#sec-proof22",
    "href": "Notebook_causal_survival.html#sec-proof22",
    "title": "\n        \n         Causal survival analysis",
    "section": "8.2 Proofs of Section 2.2",
    "text": "8.2 Proofs of Section 2.2\n\nProof. (Proposition 5). Assumption 17 allows the tranformation to be well-defined. Furthermore, it holds \\begin{align*}\nE[T^*_{\\mathrm{IPCW}}|A=a,X]\n&= E\\left[\\frac{ \\Delta^\\tau \\times\\widetilde T \\wedge \\tau}{G(\\widetilde T \\wedge \\tau | A,X)} \\middle | A = a,X\\right]  \\\\\n&= E\\left[\\frac{ \\Delta^\\tau \\times T(a) \\wedge \\tau}{G(T(a) \\wedge \\tau | A,X)} \\middle | A = a,X\\right]\\\\\n&= E\\left[ E\\left[\\frac{ \\mathbb{I}\\{T(a)\\wedge \\tau \\leqslant C \\} \\times T(a) \\wedge \\tau}{G(T(a) \\wedge \\tau | A,X)}\\middle| A, X,T(1) \\right] \\middle | A = a,X\\right] \\\\\n&= E\\left[T(a) \\wedge \\tau|A=a, X\\right] \\\\\n&= E\\left[T(a) \\wedge \\tau | X \\right].\n\\end{align*} We used in the second equality that on the event \\{\\Delta^\\tau=1, A=a\\}, it holds \\widetilde T \\wedge \\tau =  T \\wedge \\tau = T(a) \\wedge \\tau. We used in the fourth equality that G(T(a) \\wedge \\tau | A,X) = E[\\mathbb{I}\\{T(a) \\wedge \\tau \\leqslant C\\}|X,T(a),A] thanks to Assumption 16, and in the last one that A is idependent from X and T(a) thanks to Assumption 5.\n\n\nProof. (Proposition 6). Similarly to the computations done in the proof of Proposition 5, it is easy to show that \n\\mathbb{E}\\left[\\frac{\\Delta_i^\\tau}{G(\\widetilde T \\wedge\\tau | X,A)} \\mathbb{I}(\\widetilde T_i = t_k, A=a)\\right] = \\mathbb{P}(A=a) \\mathbb{P}(T(a) = t_k),\n and likewise that \n\\mathbb{E}\\left[\\frac{\\Delta_i^\\tau}{G(\\widetilde T \\wedge\\tau | X,A)} \\mathbb{I}(\\widetilde T_i \\geqslant t_k, A=a)\\right] = \\mathbb{P}(A=a) \\mathbb{P}(T(a) \\geqslant t_k),\n so that \\widehat S_{\\mathrm{IPCW}}(t) converges almost surely towards the product limit \n\\prod_{t_k \\leqslant t} \\left(1-\\frac{\\mathbb{P}(T(a) = t_k)}{\\mathbb{P}(T(a) \\geqslant t_k)}\\right) = S^{(a)}(t),\n yielding strong consistency. Asymptotic normality is straightforward.\n\n\nProof. (Proposition 7). There holds \n\\begin{aligned}\n\\mathbb{E}[T_{\\mathrm{BJ}}^*|X,A=a] &= \\mathbb{E}\\left[\\Delta^\\tau T(a) \\wedge \\tau + (1-\\Delta^\\tau)\\frac{\\mathbb{E}[T \\wedge \\tau \\times \\mathbb{I}\\{T \\wedge \\tau &gt; C\\}|C,A,X]}{\\mathbb{P}(T &gt; C|C,A,X)} \\middle | X,A=a \\right] \\\\\n&= \\mathbb{E}[\\Delta^\\tau T(a) \\wedge \\tau | X ] +  \\underbrace{\\mathbb{E}\\left[ \\mathbb{I}\\{T \\wedge \\tau &gt; C\\} \\frac{\\mathbb{E}[T \\wedge \\tau \\times \\mathbb{I}\\{T \\wedge \\tau &gt; C\\}|C,A,X]}{\\mathbb{E}[\\mathbb{I}\\{T \\wedge \\tau \\geqslant C\\}|C,A,X]}\\middle | X,A=a \\right]}_{(\\star)}.\n\\end{aligned}\n Now we easily see that conditionning wrt X in the second term yields \\begin{align*}\n(\\star) &= \\mathbb{E}\\left[ \\mathbb{E}[T \\wedge \\tau \\times \\mathbb{I}\\{T \\wedge \\tau &gt; C\\}|C,A,X] \\middle | X,A=a \\right] \\\\\n&= \\mathbb{E}[(1-\\Delta^\\tau) T \\wedge \\tau | X,A=a ]  \\\\\n&= \\mathbb{E}[(1-\\Delta^\\tau)  T(a) \\wedge \\tau | X],\n\\end{align*} ending the proof.\n\n\nProof. (Theorem 1). We let T^* = \\Delta^\\tau \\phi_1 + (1-\\Delta^\\tau)\\phi_0 be a transformation of the form Equation 20. There holds \n\\mathbb{E}[(T^*-T \\wedge \\tau)^2] = \\mathbb{E}[\\Delta^\\tau (\\phi_1-T \\wedge \\tau)^2] + \\mathbb{E}[(1-\\Delta^\\tau)(\\phi_0-T \\wedge \\tau)^2].\n The first term is non negative and is zero for the BJ transformation. Since \\phi_0 is a function of (\\widetilde T, X, A) and that \\widetilde T = C on \\{\\Delta^\\tau = 0\\}, the second term can be rewritten in the following way. We let R be a generic quantity that does not depend on \\phi_0. \\begin{align*}\n\\mathbb{E}&[(1-\\Delta^\\tau)(\\phi_0-T)^2] = \\mathbb{E}\\left[\\mathbb{I}\\{T\\wedge \\tau &gt; C\\} \\phi_0^2 - 2 \\mathbb{I}\\{T\\wedge \\tau &gt; C\\} \\phi_0 T \\wedge \\tau\\right]  + R \\\\\n&= \\mathbb{E}\\left[ \\mathbb{P}(T\\wedge \\tau &gt; C|C,A,X) \\phi_0^2 - 2 \\mathbb{E}[T\\wedge \\tau \\mathbb{I}\\{T\\wedge \\tau &gt; C\\}|C,A,X] \\phi_0 \\right] + R \\\\\n&= \\mathbb{E}\\left[\\mathbb{P}(T\\wedge \\tau &gt; C|C,A,X) \\left(\\phi_0- \\frac{\\mathbb{E}[T\\wedge \\tau \\mathbb{I}\\{T\\wedge \\tau &gt; C\\}|C,A,X]}{\\mathbb{P}(T\\wedge \\tau &gt; C|C,A,X) }\\right)^2\\right] + R.\n\\end{align*} Now the first term in the right hand side is always non-negative, and is zero for the BJ tranformation."
  },
  {
    "objectID": "Notebook_causal_survival.html#sec-proof31",
    "href": "Notebook_causal_survival.html#sec-proof31",
    "title": "\n        \n         Causal survival analysis",
    "section": "8.3 Proofs of Section 3.1",
    "text": "8.3 Proofs of Section 3.1\n\nProof. (Proposition 9). The fact that it is strongly consistent and asymptotically normal is again a simple application of the law of large number and of the \\delta-method. We indeed find that, for t_k \\leqslant\\tau \n\\begin{aligned}\n\\mathbb{E}\\left[\\frac{1}{e(X_i)} \\mathbb{1}\\{\\widetilde T_i = t_k, \\Delta_i = 1, A_i=1\\}\\right] &= \\mathbb{E}\\left[\\frac{A_i}{e(X_i)} \\mathbb{1}\\{T_i = t_k, C_i \\geqslant t_k\\}\\right] \\\\\n&=\\mathbb{E}\\left[ \\mathbb{E}\\left[ \\frac{A_i}{e(X_i)} \\mathbb{1}\\{T_i = t_k, C_i \\geqslant t_k\\} \\middle |X_i \\right]\\right] \\\\\n&= \\mathbb{E}\\left[ \\mathbb{E}\\left[\\frac{A_i}{e(X_i)}\\middle | X_i\\right] \\mathbb{P}(T_i = t_k |X_i) \\mathbb{P}( C_i \\geqslant t_k)\\right] \\\\\n&= \\mathbb{P}(T_i = t_k) \\mathbb{P}( C_i \\geqslant t_k),\n\\end{aligned}\n where we used that A is independent from T conditionnaly on X, and that C is independent from everything. Likewise, one would get that \n\\begin{aligned}\n\\mathbb{E}\\left[\\frac{1}{e(X_i)} \\mathbb{1}\\{\\widetilde T_i \\geqslant t_k, A_i=1\\}\\right] =\n&= \\mathbb{P}(T_i \\geqslant t_k) \\mathbb{P}( C_i \\geqslant t_k).\n\\end{aligned}\n Similar computations hold for A=0, ending the proof."
  },
  {
    "objectID": "Notebook_causal_survival.html#sec-proof32",
    "href": "Notebook_causal_survival.html#sec-proof32",
    "title": "\n        \n         Causal survival analysis",
    "section": "8.4 Proofs of Section 3.2",
    "text": "8.4 Proofs of Section 3.2\n\nProof. (Proposition 10). On the event \\{\\Delta^\\tau=1, A=1\\}, there holds \\widetilde T \\wedge \\tau = T \\wedge \\tau = T(1) \\wedge \\tau, whence we find that, \n\\begin{aligned}\n\\mathbb{E}[ T^*_{\\mathrm{IPCW}}|X,A=1] &= \\mathbb{E}\\left[\\frac{A}{e(X)} \\frac{\\mathbb{I}\\{T(1) \\wedge \\tau \\leqslant C\\}}{G(T(1) \\wedge \\tau|X,A)} T(1) \\wedge \\tau\\middle|X\\right] \\\\\n&= \\mathbb{E}\\left[ \\frac{A}{e(X)} \\mathbb{E}\\left[\\frac{\\mathbb{I}\\{T(1) \\wedge \\tau \\leqslant C\\}}{G(T(1) \\wedge \\tau|X,A)} \\middle| X,A, T(1) \\right]T(1) \\wedge \\tau\\middle|X\\right] \\\\\n&=\\mathbb{E}\\left[ \\frac{A}{e(X)} T(1) \\wedge \\tau\\middle|X\\right] \\\\\n&=\\mathbb{E}\\left[T(1) \\wedge \\tau\\middle|X\\right],\n\\end{aligned}\n and the same holds on the event A=0.\n\n\nProof. (Proposition 11). By consistency of \\widehat G(\\cdot|X,A) and \\widehat e and by continuity, it suffices to look at the asymptotic behavior of the oracle estimator \n\\theta^*_{\\mathrm{IPTW-IPCW}} = \\frac1n\\sum_{i=1}^n  \\left(\\frac{A_i}{ e(X_i)}-\\frac{1-A_i}{1-e(X_i)} \\right)\\frac{\\Delta_i^\\tau}{G(\\widetilde T_i \\wedge \\tau | A_i,X_i)} \\widetilde T_i \\wedge \\tau.\n The later is converging almost towards its mean, which, following similar computations as in the previous proof, write \n\\begin{aligned}\n\\mathbb{E}\\left[\\left(\\frac{A}{e(X)}-\\frac{1-A}{1-e(X)} \\right)\\frac{\\Delta^\\tau}{G(\\widetilde T \\wedge \\tau | A,X)} \\widetilde T \\wedge \\tau\\right]  \n&= \\mathbb{E}\\left[\\left(\\frac{A}{e(X)}-\\frac{1-A}{1-e(X)} \\right) T \\wedge \\tau\\right] \\\\\n&= \\mathbb{E}\\left[T(1) \\wedge \\tau\\right]-\\mathbb{E}\\left[T(0) \\wedge \\tau\\right].\n\\end{aligned}\n\n\n\nProof. (Proposition 12). Asymptotic normality comes from a mere application of the \\delta-method, while strong consistency follows from the law of large number and the follozing computations. Like for the proof of Proposition 6, one find, by first conditionning wrt X,A,T(a), that, for t_k \\leqslant\\tau, \n\\begin{aligned}\n\\mathbb{E}\\left[\\left(\\frac{A}{e(X)}+\\frac{1-A}{1-e(X)} \\right)\\frac{\\Delta^\\tau}{G(\\widetilde T \\wedge \\tau | A,X)} \\mathbb{I}\\{\\widetilde T = t_k, A=a\\}\\right] = \\mathbb{P}(T(a)=t_k)\n\\end{aligned}\n and likewise that \n\\begin{aligned}\n\\mathbb{E}\\left[\\left(\\frac{A}{e(X)}+\\frac{1-A}{1-e(X)} \\right)\\frac{\\Delta^\\tau}{G(\\widetilde T \\wedge \\tau | A,X)} \\mathbb{I}\\{\\widetilde T \\geqslant t_k, A=a\\}\\right] = \\mathbb{P}(T(a)\\geqslant t_k)\n\\end{aligned}\n so that indeed S^*_{\\mathrm{IPTW-IPCW}} (t|A=a) converges almost surely towards S^{(a)}(t).\n\n\nProof. (Proposition 13). We write \n\\begin{aligned}\n\\mathbb{E}[ T^*_{\\mathrm{IPTW-BJ}}|X,A=1] &= \\mathbb{E}\\left[\\frac{A}{e(X)} \\Delta^\\tau \\times \\widetilde T \\wedge \\tau\\middle|X\\right] + \\mathbb{E}\\left[\\frac{A}{e(X)} (1-\\Delta^\\tau) Q_S(\\widetilde T \\wedge \\tau|A,X) \\middle| X\\right].\n\\end{aligned}\n On the event \\{\\Delta^\\tau=1, A=1\\}, there holds \\widetilde T \\wedge \\tau = T \\wedge \\tau = T(1) \\wedge \\tau, whence we find that the first term on the the right hand side is equal to \n\\begin{aligned}\n\\mathbb{E}\\left[\\frac{A}{e(X)} \\Delta^\\tau \\times \\widetilde T \\wedge \\tau\\middle|X\\right] &= \\mathbb{E}\\left[\\frac{A}{e(X)} \\Delta^\\tau \\times T(1) \\wedge \\tau\\middle|X\\right] \\\\\n&= \\mathbb{E}\\left[\\Delta^\\tau \\times T(1) \\wedge \\tau\\middle|X\\right].\n\\end{aligned}\n For the second term in the right hand side, notice that on the event \\{\\Delta^\\tau=0, A=1\\}, there holds \\widetilde T = C &lt; T(1) \\wedge \\tau, so that \n\\begin{aligned}\n\\mathbb{E}&\\left[\\frac{A}{e(X)} \\mathbb{I}\\{C &lt; T(1) \\wedge \\tau\\} \\frac{\\mathbb{E}[T(1) \\wedge \\tau \\times \\mathbb{I}\\{C &lt; T(1) \\wedge \\tau\\}|X,A,C]}{\\mathbb{P}(C &lt; T(1) \\wedge \\tau | C,X,A)} \\middle| X\\right] \\\\\n&= \\mathbb{E}\\left[\\frac{A}{e(X)} \\mathbb{E}[T(1) \\wedge \\tau \\times \\mathbb{I}\\{C &lt; T(1) \\wedge \\tau\\}|X,A,C] \\middle| X\\right] \\\\\n&= \\mathbb{E}\\left[T(1) \\wedge \\tau \\times \\mathbb{I}\\{C &lt; T(1) \\wedge \\tau\\} \\middle| X\\right] \\\\\n&= \\mathbb{E}\\left[(1-\\Delta^\\tau) T(1) \\wedge \\tau  \\middle| X\\right],\n\\end{aligned}\n and the sane holds on the event \\{A=0\\}, which ends the proof.\n\n\nProof. (Proposition 14). By consistency of \\widehat G(\\cdot|X,A) and \\widehat e and by continuity, it suffices to look at the asymptotic behavior of the oracle estimator \n\\theta^*_{\\mathrm{IPTW-BJ}} = \\frac1n\\sum_{i=1}^n  \\left(\\frac{A_i}{ e(X_i)}-\\frac{1-A_i}{1-e(X_i)} \\right)\\left(\\Delta_i^\\tau \\times \\widetilde T_i \\wedge \\tau + (1-\\Delta_i^\\tau) Q_S(\\widetilde T_i \\wedge \\tau|A_i,X_i)\\right).\n The later is converging almost towards its mean, which, following similar computations as in the previous proof, is simply equal to the difference in RMST.\n\n\nProof. (Proposition 15). We can write that \n\\Delta^*_{\\mathrm{QR}} = \\underbrace{\\frac{A}{p(X)}(T^*_{\\mathrm{DR}}(F,R)-\\nu(X,1))+ \\nu(X,1)}_{(\\mathrm{A})} - \\left(\\underbrace{\\frac{1-A}{1-p(X)}(T^*_{\\mathrm{DR}}(F,R)-\\nu(X,0))+ \\nu(X,0)}_{(\\mathrm{B})} \\right).\n Focusing on term (\\mathrm{A}), we easily find that \n\\begin{aligned}\n\\mathbb{E}[(\\mathrm{A}) |X] &= \\mathbb{E}\\left[\\frac{A}{p(X)}(T^*_{\\mathrm{DR}}(F,R)-\\nu(X,1))+ \\nu(X,1) \\middle|X\\right] \\\\\n&= \\frac{e(X)}{p(X)}(\\mu(X,1)-\\nu(X,1)) + \\nu(X,1).\n\\end{aligned}\n Where we used that T^*_{\\mathrm{DR}}(F,R) is a censoring unbiased transform when F=G or R=S. Now we see that if p(X) = e(X), then \n\\mathbb{E}[(\\mathrm{A}) |X] = \\mu(X,1)-\\nu(X,1) + \\nu(X,1) = \\mu(X,1),\n and if \\nu(X,1) = \\mu(X,1), then \n\\mathbb{E}[(\\mathrm{A}) |X] = \\frac{e(X)}{p(X)} \\times 0 + \\mu(X,1) = \\mu(X,1).\n Likewise, we would show that \\mathbb{E}[(\\mathrm{B}) |X] = \\mu(X,0) under either alternative, ending the proof."
  },
  {
    "objectID": "Notebook_causal_survival.html#sec-stat_RCT",
    "href": "Notebook_causal_survival.html#sec-stat_RCT",
    "title": "\n        \n         Causal survival analysis",
    "section": "9.1 RCT",
    "text": "9.1 RCT\nThe summary by group of treatment of the generated (observed and unobserved) RCT with independent censoring is displayed below:\n\n\n[1] \"Descriptive statistics for group A=0:   1009\"\n\n\n       X1                X2               X3                X4         \n Min.   :-2.3717   Min.   :-2.179   Min.   :-4.5650   Min.   :-2.5364  \n 1st Qu.: 0.2679   1st Qu.: 0.252   1st Qu.:-1.6641   1st Qu.: 0.2939  \n Median : 0.9282   Median : 1.035   Median :-1.0164   Median : 0.9655  \n Mean   : 0.9661   Mean   : 1.002   Mean   :-0.9971   Mean   : 0.9667  \n 3rd Qu.: 1.6611   3rd Qu.: 1.656   3rd Qu.:-0.3515   3rd Qu.: 1.5847  \n Max.   : 3.9811   Max.   : 4.232   Max.   : 2.5378   Max.   : 4.4515  \n       C                  T1               T0               status     \n Min.   :  0.0015   Min.   : 10.00   Min.   :  0.0034   Min.   :0.000  \n 1st Qu.:  9.3665   1st Qu.: 12.95   1st Qu.:  2.9484   1st Qu.:0.000  \n Median : 23.3684   Median : 19.29   Median :  9.2908   Median :1.000  \n Mean   : 32.9916   Mean   : 32.86   Mean   : 22.8584   Mean   :0.667  \n 3rd Qu.: 46.5359   3rd Qu.: 36.29   3rd Qu.: 26.2877   3rd Qu.:1.000  \n Max.   :317.4768   Max.   :632.10   Max.   :622.0965   Max.   :1.000  \n     T_tild         \n Min.   :  0.00155  \n 1st Qu.:  2.31504  \n Median :  6.02857  \n Mean   : 11.09017  \n 3rd Qu.: 14.07687  \n Max.   :122.89170  \n\n\n[1] \"Descriptive statistics for group A=1:   991\"\n\n\n       X1                X2                X3                X4         \n Min.   :-2.2603   Min.   :-2.6595   Min.   :-4.5936   Min.   :-2.6654  \n 1st Qu.: 0.2853   1st Qu.: 0.2372   1st Qu.:-1.6688   1st Qu.: 0.3317  \n Median : 0.9595   Median : 0.8800   Median :-0.9721   Median : 0.9980  \n Mean   : 0.9884   Mean   : 0.9161   Mean   :-0.9988   Mean   : 1.0147  \n 3rd Qu.: 1.6346   3rd Qu.: 1.5869   3rd Qu.:-0.3310   3rd Qu.: 1.7124  \n Max.   : 4.2742   Max.   : 4.2350   Max.   : 1.7611   Max.   : 4.9525  \n       C                   T1               T0               status      \n Min.   :  0.03959   Min.   : 10.01   Min.   :  0.0101   Min.   :0.0000  \n 1st Qu.: 10.97817   1st Qu.: 13.12   1st Qu.:  3.1158   1st Qu.:0.0000  \n Median : 24.16685   Median : 18.80   Median :  8.7991   Median :1.0000  \n Mean   : 35.36328   Mean   : 32.04   Mean   : 22.0444   Mean   :0.5177  \n 3rd Qu.: 47.35449   3rd Qu.: 35.86   3rd Qu.: 25.8622   3rd Qu.:1.0000  \n Max.   :299.34114   Max.   :429.89   Max.   :419.8926   Max.   :1.0000  \n     T_tild         \n Min.   :  0.03959  \n 1st Qu.: 10.14844  \n Median : 13.70536  \n Mean   : 17.26315  \n 3rd Qu.: 20.85109  \n Max.   :121.60220  \n\n\nCovariates are balanced between groups, and censoring times are the same (independent censoring). However, there are more censored observations in the treated group (A=1) than in the control group (A=0). This is due to the higher instantaneous hazard of the event in the treated group (with T_1=T_0+10) compared to the constant hazard of censoring.\nThe summary of the generated (observed and unobserved) RCT with conditionally independent censoring stratified by treatment is displayed below.\n\n\n[1] \"Descriptive statistics for group A=0:   1016\"\n\n\n       X1                X2                X3                X4         \n Min.   :-3.0648   Min.   :-2.1919   Min.   :-4.1784   Min.   :-2.0549  \n 1st Qu.: 0.3364   1st Qu.: 0.3416   1st Qu.:-1.6018   1st Qu.: 0.2814  \n Median : 1.0316   Median : 1.0272   Median :-0.9934   Median : 0.9902  \n Mean   : 0.9852   Mean   : 0.9979   Mean   :-0.9612   Mean   : 0.9962  \n 3rd Qu.: 1.6238   3rd Qu.: 1.6785   3rd Qu.:-0.2783   3rd Qu.: 1.6780  \n Max.   : 3.9565   Max.   : 4.0478   Max.   : 1.9065   Max.   : 3.9530  \n       C                   T1                T0                status      \n Min.   :  0.01128   Min.   :  10.00   Min.   :   0.0003   Min.   :0.0000  \n 1st Qu.:  2.76511   1st Qu.:  12.72   1st Qu.:   2.7195   1st Qu.:0.0000  \n Median :  7.20917   Median :  18.62   Median :   8.6157   Median :0.0000  \n Mean   : 14.91517   Mean   :  35.35   Mean   :  25.3521   Mean   :0.4931  \n 3rd Qu.: 18.07179   3rd Qu.:  33.61   3rd Qu.:  23.6090   3rd Qu.:1.0000  \n Max.   :195.17010   Max.   :1348.52   Max.   :1338.5182   Max.   :1.0000  \n   status_tau         T_tild         \n Min.   :0.0000   Min.   :  0.00029  \n 1st Qu.:0.0000   1st Qu.:  1.34175  \n Median :1.0000   Median :  3.73938  \n Mean   :0.5285   Mean   :  7.97819  \n 3rd Qu.:1.0000   3rd Qu.:  8.65814  \n Max.   :1.0000   Max.   :133.77882  \n\n\n[1] \"Descriptive statistics for group A=1:   984\"\n\n\n       X1                X2                X3                X4         \n Min.   :-1.8170   Min.   :-1.8011   Min.   :-4.0745   Min.   :-1.9199  \n 1st Qu.: 0.3773   1st Qu.: 0.3578   1st Qu.:-1.6761   1st Qu.: 0.2911  \n Median : 1.0645   Median : 0.9846   Median :-1.0406   Median : 1.0186  \n Mean   : 1.0368   Mean   : 1.0017   Mean   :-0.9814   Mean   : 1.0420  \n 3rd Qu.: 1.7416   3rd Qu.: 1.6920   3rd Qu.:-0.2746   3rd Qu.: 1.7262  \n Max.   : 4.2985   Max.   : 4.8790   Max.   : 2.5217   Max.   : 4.0936  \n       C                   T1               T0               status      \n Min.   :  0.00921   Min.   : 10.01   Min.   :  0.0063   Min.   :0.0000  \n 1st Qu.:  2.79470   1st Qu.: 12.94   1st Qu.:  2.9384   1st Qu.:0.0000  \n Median :  7.55517   Median : 18.07   Median :  8.0694   Median :0.0000  \n Mean   : 16.93698   Mean   : 31.89   Mean   : 21.8924   Mean   :0.2266  \n 3rd Qu.: 19.64255   3rd Qu.: 33.90   3rd Qu.: 23.9030   3rd Qu.:0.0000  \n Max.   :280.84156   Max.   :794.30   Max.   :784.2966   Max.   :1.0000  \n   status_tau         T_tild         \n Min.   :0.0000   Min.   :  0.00921  \n 1st Qu.:0.0000   1st Qu.:  2.79470  \n Median :0.0000   Median :  7.55517  \n Mean   :0.2825   Mean   : 11.81059  \n 3rd Qu.:1.0000   3rd Qu.: 13.85940  \n Max.   :1.0000   Max.   :167.34430  \n\n\nCovariates are balanced between the two groups. However, censoring times differ between groups due to conditionally independent censoring based on covariates and treatment group. Indeed, the distribution of C is different between the treatment group."
  },
  {
    "objectID": "Notebook_causal_survival.html#sec-stat_obs",
    "href": "Notebook_causal_survival.html#sec-stat_obs",
    "title": "\n        \n         Causal survival analysis",
    "section": "9.2 Observational study with linear relationship",
    "text": "9.2 Observational study with linear relationship\n\n\nHide/Show the code\n# Observational data with no informative censoring\ndata_obs1 &lt;- simulate_data_obs(n = 2000, tau = 25, scenario = \"Obs1\")\n\n# Observational data simulation with dependent censoring\ndata_obs2 &lt;- simulate_data_obs(n = 2000, tau = 25, scenario = \"Obs2\", \n                               coefC = 0.03, parsC = c(0.7,0.3,-0.25,-0.1))\n\n\nThe summary of the generated (observed and unobserved) data set observational study with independent censoring stratified by treatment is displayed below to enhance the difference with the other scenario.\n\n\n[1] \"Descriptive statistics for group A=0:   1123\"\n\n\n       X1                X2                X3                 X4         \n Min.   :-2.3762   Min.   :-2.0380   Min.   :-2.92954   Min.   :-1.4069  \n 1st Qu.: 0.5997   1st Qu.: 0.5897   1st Qu.:-1.06823   1st Qu.: 0.5755  \n Median : 1.2423   Median : 1.2226   Median :-0.53822   Median : 1.2319  \n Mean   : 1.2349   Mean   : 1.2156   Mean   :-0.52511   Mean   : 1.2390  \n 3rd Qu.: 1.8943   3rd Qu.: 1.8917   3rd Qu.:-0.01039   3rd Qu.: 1.8434  \n Max.   : 3.8160   Max.   : 4.1685   Max.   : 2.41827   Max.   : 4.5285  \n       C                   T1               T0               status      \n Min.   :  0.00674   Min.   : 10.00   Min.   :  0.0017   Min.   :0.0000  \n 1st Qu.:  9.23602   1st Qu.: 12.56   1st Qu.:  2.5566   1st Qu.:0.0000  \n Median : 22.87295   Median : 17.50   Median :  7.5035   Median :1.0000  \n Mean   : 32.56493   Mean   : 28.55   Mean   : 18.5455   Mean   :0.7213  \n 3rd Qu.: 45.98310   3rd Qu.: 29.55   3rd Qu.: 19.5466   3rd Qu.:1.0000  \n Max.   :213.02322   Max.   :540.36   Max.   :530.3551   Max.   :1.0000  \n     T_tild         \n Min.   :  0.00172  \n 1st Qu.:  2.03138  \n Median :  5.59976  \n Mean   :  9.90051  \n 3rd Qu.: 12.37368  \n Max.   :153.43747  \n\n\n[1] \"Descriptive statistics for group A=1:   877\"\n\n\n       X1                X2                 X3                X4          \n Min.   :-2.2320   Min.   :-2.61197   Min.   :-4.3459   Min.   :-2.29534  \n 1st Qu.: 0.1094   1st Qu.: 0.09389   1st Qu.:-2.1617   1st Qu.: 0.09289  \n Median : 0.7266   Median : 0.75077   Median :-1.6094   Median : 0.72682  \n Mean   : 0.7599   Mean   : 0.77138   Mean   :-1.6240   Mean   : 0.73730  \n 3rd Qu.: 1.4171   3rd Qu.: 1.44783   3rd Qu.:-1.0549   3rd Qu.: 1.33555  \n Max.   : 3.7794   Max.   : 3.97754   Max.   : 0.9666   Max.   : 4.26223  \n       C                   T1               T0               status      \n Min.   :  0.00022   Min.   : 10.00   Min.   :  0.0016   Min.   :0.0000  \n 1st Qu.: 10.66734   1st Qu.: 13.10   1st Qu.:  3.1004   1st Qu.:0.0000  \n Median : 24.58065   Median : 19.47   Median :  9.4739   Median :1.0000  \n Mean   : 35.55521   Mean   : 34.56   Mean   : 24.5575   Mean   :0.5029  \n 3rd Qu.: 47.60894   3rd Qu.: 37.07   3rd Qu.: 27.0652   3rd Qu.:1.0000  \n Max.   :285.14688   Max.   :482.00   Max.   :471.9954   Max.   :1.0000  \n     T_tild         \n Min.   :  0.00022  \n 1st Qu.: 10.10633  \n Median : 13.54446  \n Mean   : 17.43674  \n 3rd Qu.: 21.13149  \n Max.   :166.82227  \n\n\nThe covariates between the two groups of treatment are unbalanced because of dependent treatment assignation. The mean of X1, X2, X3 and X4 is bigger in the control group than in the treated group. The censoring times have the same distribution (independent censoring). There are more censored observation in the treated group (A=1) than in the control group (A=0) for the same reason than in the RCT scenario.\nThe summary of the generated (observed and unobserved) data set observational study with conditionally independent censoring stratified by treatment is displayed below.\n\n\n[1] \"Descriptive statistics for group A=0:   1104\"\n\n\n       X1                X2                X3                X4         \n Min.   :-1.6864   Min.   :-1.9059   Min.   :-3.1252   Min.   :-2.1031  \n 1st Qu.: 0.5537   1st Qu.: 0.5269   1st Qu.:-1.0160   1st Qu.: 0.4952  \n Median : 1.2266   Median : 1.1874   Median :-0.4692   Median : 1.1476  \n Mean   : 1.2226   Mean   : 1.2092   Mean   :-0.4725   Mean   : 1.1763  \n 3rd Qu.: 1.8866   3rd Qu.: 1.8656   3rd Qu.: 0.1039   3rd Qu.: 1.8604  \n Max.   : 4.2387   Max.   : 4.1172   Max.   : 2.1600   Max.   : 4.4907  \n       C                   T1               T0               status      \n Min.   :  0.00132   Min.   : 10.00   Min.   :  0.0018   Min.   :0.0000  \n 1st Qu.:  2.19140   1st Qu.: 12.87   1st Qu.:  2.8711   1st Qu.:0.0000  \n Median :  6.56114   Median : 18.34   Median :  8.3429   Median :0.0000  \n Mean   : 13.48965   Mean   : 30.76   Mean   : 20.7641   Mean   :0.4457  \n 3rd Qu.: 15.42927   3rd Qu.: 32.18   3rd Qu.: 22.1770   3rd Qu.:1.0000  \n Max.   :243.25035   Max.   :885.89   Max.   :875.8917   Max.   :1.0000  \n   status_tau         T_obs                 e            \n Min.   :0.0000   Min.   :  0.00132   Min.   :0.0000356  \n 1st Qu.:0.0000   1st Qu.:  1.16037   1st Qu.:0.0191866  \n Median :0.0000   Median :  3.26221   Median :0.0919935  \n Mean   :0.4801   Mean   :  7.48578   Mean   :0.2043899  \n 3rd Qu.:1.0000   3rd Qu.:  8.34469   3rd Qu.:0.3037508  \n Max.   :1.0000   Max.   :243.25035   Max.   :0.9864246  \n\n\n[1] \"Descriptive statistics for group A=1:   896\"\n\n\n       X1                X2                X3               X4         \n Min.   :-2.5113   Min.   :-2.4490   Min.   :-4.972   Min.   :-2.4800  \n 1st Qu.: 0.1467   1st Qu.: 0.1093   1st Qu.:-2.137   1st Qu.: 0.1187  \n Median : 0.7990   Median : 0.7587   Median :-1.598   Median : 0.8183  \n Mean   : 0.7870   Mean   : 0.7756   Mean   :-1.624   Mean   : 0.7752  \n 3rd Qu.: 1.4499   3rd Qu.: 1.4630   3rd Qu.:-1.120   3rd Qu.: 1.4319  \n Max.   : 4.1012   Max.   : 3.9214   Max.   : 1.433   Max.   : 4.0932  \n       C                   T1               T0               status      \n Min.   :  0.00065   Min.   : 10.01   Min.   :  0.0106   Min.   :0.0000  \n 1st Qu.:  2.64128   1st Qu.: 13.01   1st Qu.:  3.0112   1st Qu.:0.0000  \n Median :  7.14200   Median : 18.66   Median :  8.6586   Median :0.0000  \n Mean   : 15.41219   Mean   : 31.84   Mean   : 21.8436   Mean   :0.1797  \n 3rd Qu.: 18.62036   3rd Qu.: 33.35   3rd Qu.: 23.3452   3rd Qu.:0.0000  \n Max.   :255.13595   Max.   :484.60   Max.   :474.5985   Max.   :1.0000  \n   status_tau         T_obs                 e           \n Min.   :0.0000   Min.   :  0.00065   Min.   :0.001313  \n 1st Qu.:0.0000   1st Qu.:  2.64128   1st Qu.:0.555162  \n Median :0.0000   Median :  7.14200   Median :0.834134  \n Mean   :0.2444   Mean   : 11.36928   Mean   :0.729791  \n 3rd Qu.:0.0000   3rd Qu.: 14.40704   3rd Qu.:0.957995  \n Max.   :1.0000   Max.   :187.85289   Max.   :0.999980  \n\n\nThe covariates between the two groups are unbalanced. The censoring time is dependent on the covariates also, as the covariates are unbalanced between the two groups, the censoring time is also unbalanced. In particular, the mean of X1, X2, X3 and X4 is bigger in the control group than in the treated group. Also, the number of events is bigger in the control than treated group."
  },
  {
    "objectID": "Notebook_causal_survival.html#sec-stat_inter",
    "href": "Notebook_causal_survival.html#sec-stat_inter",
    "title": "\n        \n         Causal survival analysis",
    "section": "9.3 Observational study with interaction",
    "text": "9.3 Observational study with interaction\n\n\nHide/Show the code\nmis &lt;- simulate_data_mis(n=2000,tau=0.5)\nsummary(mis)\n\n\n       X1                X2                X3                  X4         \n Min.   :-2.3916   Min.   :-2.5091   Min.   :-2.648790   Min.   :-2.6393  \n 1st Qu.:-0.1597   1st Qu.:-0.1713   1st Qu.:-0.000599   1st Qu.:-0.1626  \n Median : 0.5159   Median : 0.5347   Median : 0.641442   Median : 0.4947  \n Mean   : 0.5124   Mean   : 0.5101   Mean   : 0.669806   Mean   : 0.5087  \n 3rd Qu.: 1.1727   3rd Qu.: 1.1997   3rd Qu.: 1.341683   3rd Qu.: 1.1968  \n Max.   : 4.6125   Max.   : 3.2266   Max.   : 4.365723   Max.   : 3.6570  \n      tau            A                T0                  T1         \n Min.   :0.5   Min.   :0.0000   Min.   :  0.00000   Min.   :  1.000  \n 1st Qu.:0.5   1st Qu.:0.0000   1st Qu.:  0.03669   1st Qu.:  1.037  \n Median :0.5   Median :1.0000   Median :  0.19898   Median :  1.199  \n Mean   :0.5   Mean   :0.5765   Mean   :  1.00054   Mean   :  2.001  \n 3rd Qu.:0.5   3rd Qu.:1.0000   3rd Qu.:  0.76383   3rd Qu.:  1.764  \n Max.   :0.5   Max.   :1.0000   Max.   :116.83491   Max.   :117.835  \n       C                T_obs             T_obs_tau             status      \n Min.   :   0.000   Min.   : 0.000003   Min.   :0.0000027   Min.   :0.0000  \n 1st Qu.:   0.144   1st Qu.: 0.051872   1st Qu.:0.0518725   1st Qu.:0.0000  \n Median :   0.569   Median : 0.256223   Median :0.2562225   Median :0.0000  \n Mean   :  10.509   Mean   : 0.551477   Mean   :0.2708140   Mean   :0.4475  \n 3rd Qu.:   1.995   3rd Qu.: 0.944548   3rd Qu.:0.5000000   3rd Qu.:1.0000  \n Max.   :9347.135   Max.   :19.125321   Max.   :0.5000000   Max.   :1.0000  \n   status_tau    censor.status          e            \n Min.   :0.000   Min.   :0.0000   Min.   :0.0001268  \n 1st Qu.:0.000   1st Qu.:0.0000   1st Qu.:0.4195793  \n Median :1.000   Median :1.0000   Median :0.5924089  \n Mean   :0.613   Mean   :0.5525   Mean   :0.5889387  \n 3rd Qu.:1.000   3rd Qu.:1.0000   3rd Qu.:0.8121346  \n Max.   :1.000   Max.   :1.0000   Max.   :0.9999816  \n\n\nThe summary of the generated (observed and unobserved) data set complex observational study (conditionally independent censoring) stratified by treatment is displayed below.\n\n\n[1] \"Descriptive statistics for group A=0:   847\"\n\n\n       X1                X2                  X3                C           \n Min.   :-2.2860   Min.   :-2.318775   Min.   :-2.0624   Min.   :   0.000  \n 1st Qu.:-0.1463   1st Qu.: 0.009192   1st Qu.:-0.1019   1st Qu.:   0.154  \n Median : 0.5287   Median : 0.789528   Median : 0.4562   Median :   0.633  \n Mean   : 0.5294   Mean   : 0.722645   Mean   : 0.4520   Mean   :  16.413  \n 3rd Qu.: 1.1736   3rd Qu.: 1.433854   3rd Qu.: 1.0613   3rd Qu.:   2.204  \n Max.   : 4.6125   Max.   : 3.226582   Max.   : 2.8941   Max.   :9347.135  \n       T1               T0               status           T_obs         \n Min.   : 1.000   Min.   : 0.00000   Min.   :0.0000   Min.   :0.000003  \n 1st Qu.: 1.028   1st Qu.: 0.02833   1st Qu.:0.0000   1st Qu.:0.017771  \n Median : 1.160   Median : 0.15985   Median :1.0000   Median :0.090495  \n Mean   : 1.760   Mean   : 0.75956   Mean   :0.6741   Mean   :0.278159  \n 3rd Qu.: 1.641   3rd Qu.: 0.64093   3rd Qu.:1.0000   3rd Qu.:0.357800  \n Max.   :44.121   Max.   :43.12091   Max.   :1.0000   Max.   :4.961386  \n   status_tau           e            \n Min.   :0.0000   Min.   :0.0001268  \n 1st Qu.:1.0000   1st Qu.:0.2409232  \n Median :1.0000   Median :0.4524557  \n Mean   :0.7532   Mean   :0.4259156  \n 3rd Qu.:1.0000   3rd Qu.:0.5914438  \n Max.   :1.0000   Max.   :0.9636341  \n\n\n[1] \"Descriptive statistics for group A=1:   1153\"\n\n\n       X1                X2                X3                C           \n Min.   :-2.3916   Min.   :-2.5091   Min.   :-2.6488   Min.   :  0.0000  \n 1st Qu.:-0.1732   1st Qu.:-0.3105   1st Qu.: 0.1008   1st Qu.:  0.1334  \n Median : 0.5126   Median : 0.3202   Median : 0.7999   Median :  0.5217  \n Mean   : 0.4999   Mean   : 0.3540   Mean   : 0.8298   Mean   :  6.1718  \n 3rd Qu.: 1.1697   3rd Qu.: 1.0148   3rd Qu.: 1.5629   3rd Qu.:  1.8059  \n Max.   : 4.1145   Max.   : 3.1539   Max.   : 4.3657   Max.   :741.1075  \n       T1                T0                status          T_obs          \n Min.   :  1.000   Min.   :  0.00000   Min.   :0.000   Min.   : 0.000015  \n 1st Qu.:  1.046   1st Qu.:  0.04555   1st Qu.:0.000   1st Qu.: 0.133360  \n Median :  1.226   Median :  0.22645   Median :0.000   Median : 0.521662  \n Mean   :  2.178   Mean   :  1.17757   Mean   :0.281   Mean   : 0.752259  \n 3rd Qu.:  1.851   3rd Qu.:  0.85078   3rd Qu.:1.000   3rd Qu.: 1.071781  \n Max.   :117.835   Max.   :116.83491   Max.   :1.000   Max.   :19.125321  \n   status_tau         e          \n Min.   :0.00   Min.   :0.04268  \n 1st Qu.:0.00   1st Qu.:0.54515  \n Median :1.00   Median :0.73596  \n Mean   :0.51   Mean   :0.70870  \n 3rd Qu.:1.00   3rd Qu.:0.89896  \n Max.   :1.00   Max.   :0.99998  \n\n\nThe observations are the same than the previous scenario: The covariates and the censoring time between the two groups are unbalanced. To be able to evaluate the estimators, we need to know the true \\theta_{\\mathrm{RMST}} at time \\tau."
  }
]